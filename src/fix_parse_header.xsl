<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0">
<xsl:output method="text" media-type="text/plain" encoding="us-ascii"/>

<xsl:param name="now"/>
<xsl:param name="email">saleyn@gmail.com</xsl:param>

<xsl:template name="pad">
	<xsl:param name="padChar" select="' '"/>
    <xsl:param name="padCount" select="0"/>
    <xsl:value-of select="$padChar"/>
    <xsl:if test="$padCount &gt; 1">
		<xsl:call-template name="pad">
			<xsl:with-param name="padCount" select="number($padCount) - 1"/>
			<xsl:with-param name="padChar" select="$padChar"/>
		</xsl:call-template>
	</xsl:if>
</xsl:template>

<xsl:template name="arg-value">
	<xsl:param name="value"/>
	<xsl:param name="type"/>
	<xsl:choose>
		<xsl:when test="$type='INT'"><xsl:value-of select="$value"/></xsl:when>
		<xsl:when test="$type='STRING'">"<xsl:value-of select="$value"/>"</xsl:when>
		<xsl:when test="$type='BOOLEAN' and $value='Y'">true</xsl:when>
		<xsl:when test="$type='BOOLEAN' and $value='N'">false</xsl:when>
		<xsl:when test="$type='CHAR'">$<xsl:value-of select="$value"/></xsl:when>
		<xsl:when test="$type='MULTIPLEVALUESTRING'">$<xsl:value-of select="$value"/></xsl:when>
		<xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
	</xsl:choose>
</xsl:template>

<xsl:template name="proper-case">
	<xsl:param name="str"/>
	<xsl:value-of select="concat(translate(substring($str, 1, 1),
		'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), substring($str, 2))"/>
</xsl:template>

<xsl:template match="/">%%%----------------------------------------------------------------------------
%%% FIX protocol record definitions
%%% @author Serge Aleynikov &lt;<xsl:value-of select="$email"/>&gt;
%%%----------------------------------------------------------------------------
%%% Created: <xsl:value-of select="$now" />
%%%----------------------------------------------------------------------------
%%% This file is automatically generated!  Don't modify by hand!
%%%----------------------------------------------------------------------------

%% Generic FIX message
-record(fix, {
      version<xsl:for-each select="fix/header/field[@required = 'Y' and position() > 2]">
    , <xsl:call-template name="proper-case">
			<xsl:with-param name="str"><xsl:value-of select="@name"/></xsl:with-param>
	</xsl:call-template>
	</xsl:for-each>
    , body        :: tuple()
}).
<xsl:for-each select="fix/messages/message">
%% Message type: <xsl:value-of select="@msgtype"/>
-record(<xsl:call-template name="proper-case">
			<xsl:with-param name="str"><xsl:value-of select="@name"/></xsl:with-param>
	</xsl:call-template>, {<xsl:for-each select="field[@required = 'Y']">
	    <xsl:variable name="Field" select="@name"/>
		<xsl:choose>
			<xsl:when test="position() = 1"><xsl:text>
      </xsl:text></xsl:when>
			<xsl:otherwise><xsl:text>
    , </xsl:text></xsl:otherwise>
	</xsl:choose><xsl:call-template name="proper-case">
		<xsl:with-param name="str"><xsl:value-of select="@name"/></xsl:with-param>
	</xsl:call-template><xsl:call-template name="pad">
			<xsl:with-param name="padCount"><xsl:value-of select="48 - string-length(@name)"/></xsl:with-param>
		</xsl:call-template>%% Tag: <xsl:value-of select="/fix/fields/field[@name = $Field]/@number"/>
	</xsl:for-each>
	<xsl:choose>
		<xsl:when test="count(field[@required = 'Y']) > 0"><xsl:text>
    , opt = []</xsl:text></xsl:when>
		<xsl:otherwise><xsl:text>
      opt = []</xsl:text></xsl:otherwise>
	</xsl:choose>
}).
</xsl:for-each>

<xsl:apply-templates/>
</xsl:template>

</xsl:stylesheet>