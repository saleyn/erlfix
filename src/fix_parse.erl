%%%----------------------------------------------------------------------------
%%% @doc FIX Protocol Parser.
%%% @author Serge Aleynikov <saleyn@gmail.com>
%%% @copyright 2011 Serge Aleynikov
%%% @end
%%%----------------------------------------------------------------------------
%%% Created: 2014-06-16
%%%----------------------------------------------------------------------------
%%% This file is automatically generated!  Don't modify by hand!
%%%----------------------------------------------------------------------------
-module(fix_parse).
-author('saleyn@gmail.com').

%% API
-export([
      decode/1, full_decode/1    
    , encode_msg_type/1, decode_msg_type/1
    , decode_field/1, encode_field/1, decode_value/2
]).

-include("fix_parse.hrl").

%% @spec (FixFields) -> #fix{}
%% @doc Decode FIX message from a list of fields
full_decode(FixFields) ->
    Msg  = decode(FixFields),
    Body = [{element(1, decode_field(I)), decode_value(I, V)}
        || {I,V} <- element(tuple_size(Msg#fix.body), Msg#fix.body)],
    Msg#fix{body = Body}.
    
%% @spec ([{Field::integer(), Value::binary()}]) -> #fix{}
%% @doc Decode FIX message from a list of fields
decode([{8,<<"FIX.",V1,$.,V2>>},_,{35,<<I>>}|Fields]) ->
	fill_header(#fix{version = (V1-$0)*10+(V2-$0),
	                 msgType=I}, Fields).

fill_header(Msg, [{34,B} | Tail]) ->
    fill_header(Msg#fix{msgSeqNum = list_to_integer(binary_to_list(B))}, Tail);
fill_header(Msg, [{49,B} | Tail]) ->
    fill_header(Msg#fix{senderCompID = B}, Tail);
fill_header(Msg, [{56,B} | Tail]) ->
    fill_header(Msg#fix{targetCompID = B}, Tail);
fill_header(Msg, [{52,B} | Tail]) ->
    fill_header(Msg#fix{sendingTime = to_timestamp(B)}, Tail);
fill_header(Msg, Fields) ->
    Msg#fix{msgType = element(1, decode_msg_type(Msg#fix.msgType)),
            body = decode_msg_body(Msg#fix.msgType, Fields)}.

decode_msg_body($0, Fields) ->	decode_msg_body2($0, #heartbeat{}, Fields);
decode_msg_body($1, Fields) ->	decode_msg_body2($1, #testRequest{}, Fields);
decode_msg_body($2, Fields) ->	decode_msg_body2($2, #resendRequest{}, Fields);
decode_msg_body($3, Fields) ->	decode_msg_body2($3, #reject{}, Fields);
decode_msg_body($4, Fields) ->	decode_msg_body2($4, #sequenceReset{}, Fields);
decode_msg_body($5, Fields) ->	decode_msg_body2($5, #logout{}, Fields);
decode_msg_body($6, Fields) ->	decode_msg_body2($6, #indicationofInterest{}, Fields);
decode_msg_body($7, Fields) ->	decode_msg_body2($7, #advertisement{}, Fields);
decode_msg_body($8, Fields) ->	decode_msg_body2($8, #executionReport{}, Fields);
decode_msg_body($9, Fields) ->	decode_msg_body2($9, #orderCancelReject{}, Fields);
decode_msg_body($A, Fields) ->	decode_msg_body2($A, #logon{}, Fields);
decode_msg_body($B, Fields) ->	decode_msg_body2($B, #news{}, Fields);
decode_msg_body($C, Fields) ->	decode_msg_body2($C, #email{}, Fields);
decode_msg_body($D, Fields) ->	decode_msg_body2($D, #newOrderSingle{}, Fields);
decode_msg_body($E, Fields) ->	decode_msg_body2($E, #newOrderList{}, Fields);
decode_msg_body($F, Fields) ->	decode_msg_body2($F, #orderCancelRequest{}, Fields);
decode_msg_body($G, Fields) ->	decode_msg_body2($G, #orderCancelReplaceRequest{}, Fields);
decode_msg_body($H, Fields) ->	decode_msg_body2($H, #orderStatusRequest{}, Fields);
decode_msg_body($J, Fields) ->	decode_msg_body2($J, #allocation{}, Fields);
decode_msg_body($K, Fields) ->	decode_msg_body2($K, #listCancelRequest{}, Fields);
decode_msg_body($L, Fields) ->	decode_msg_body2($L, #listExecute{}, Fields);
decode_msg_body($M, Fields) ->	decode_msg_body2($M, #listStatusRequest{}, Fields);
decode_msg_body($N, Fields) ->	decode_msg_body2($N, #listStatus{}, Fields);
decode_msg_body($P, Fields) ->	decode_msg_body2($P, #allocationACK{}, Fields);
decode_msg_body($Q, Fields) ->	decode_msg_body2($Q, #dontKnowTrade{}, Fields);
decode_msg_body($R, Fields) ->	decode_msg_body2($R, #quoteRequest{}, Fields);
decode_msg_body($S, Fields) ->	decode_msg_body2($S, #quote{}, Fields);
decode_msg_body($T, Fields) ->	decode_msg_body2($T, #settlementInstructions{}, Fields);
decode_msg_body($V, Fields) ->	decode_msg_body2($V, #marketDataRequest{}, Fields);
decode_msg_body($W, Fields) ->	decode_msg_body2($W, #marketDataSnapshotFullRefresh{}, Fields);
decode_msg_body($X, Fields) ->	decode_msg_body2($X, #marketDataIncrementalRefresh{}, Fields);
decode_msg_body($Y, Fields) ->	decode_msg_body2($Y, #marketDataRequestReject{}, Fields);
decode_msg_body($Z, Fields) ->	decode_msg_body2($Z, #quoteCancel{}, Fields);
decode_msg_body($a, Fields) ->	decode_msg_body2($a, #quoteStatusRequest{}, Fields);
decode_msg_body($b, Fields) ->	decode_msg_body2($b, #quoteAcknowledgement{}, Fields);
decode_msg_body($c, Fields) ->	decode_msg_body2($c, #securityDefinitionRequest{}, Fields);
decode_msg_body($d, Fields) ->	decode_msg_body2($d, #securityDefinition{}, Fields);
decode_msg_body($e, Fields) ->	decode_msg_body2($e, #securityStatusRequest{}, Fields);
decode_msg_body($f, Fields) ->	decode_msg_body2($f, #securityStatus{}, Fields);
decode_msg_body($g, Fields) ->	decode_msg_body2($g, #tradingSessionStatusRequest{}, Fields);
decode_msg_body($h, Fields) ->	decode_msg_body2($h, #tradingSessionStatus{}, Fields);
decode_msg_body($i, Fields) ->	decode_msg_body2($i, #massQuote{}, Fields);
decode_msg_body($j, Fields) ->	decode_msg_body2($j, #businessMessageReject{}, Fields);
decode_msg_body($k, Fields) ->	decode_msg_body2($k, #bidRequest{}, Fields);
decode_msg_body($l, Fields) ->	decode_msg_body2($l, #bidResponse{}, Fields);
decode_msg_body($m, Fields) ->	decode_msg_body2($m, #listStrikePrice{}, Fields);
decode_msg_body(Other,_Flds) -> throw({undef_msg_type, Other}).

decode_msg_body2(MsgType, R, [{N, B} | T]) ->
    case msg_req_field_position(MsgType, N) of
    I when is_integer(I), I =< tuple_size(R)-1 ->
		decode_msg_body2(MsgType, setelement(I+1, R, decode_field_value(N, B)), T);
    not_found ->
        decode_msg_body2(MsgType,
            setelement(tuple_size(R), R, [{N, B} | element(tuple_size(R), R)]),
            T)
    end;
decode_msg_body2(_MsgType, R, []) ->
    R.

decode_field_value(N, Bin) ->
	decode_field_value2(element(2, decode_field(N)), Bin).
	
decode_field_value(N, Type, Bin) ->
    try
		decode_field_value2(Type, Bin)
	catch _:Error ->
		throw({{decode_field_value, N, Type, Bin}, Error})
	end.

decode_field_value2(Type, Bin) -> 
	case Type of
	'AMT'                 -> to_float(Bin);
	'ATOM'				  -> list_to_atom(binary_to_list(Bin));
	'BOOLEAN'
		when Bin=:=<<"Y">>-> true;
	'BOOLEAN'			  -> false;
	'CHAR'                -> <<C>> = Bin, C;
	'CURRENCY'            -> to_float(Bin);
	'DATA'                -> Bin;
	'DAYOFMONTH'          -> list_to_integer(binary_to_list(Bin));
	'EXCHANGE'            -> Bin;
	'FLOAT'               -> to_float(Bin);
	'INT'                 -> list_to_integer(binary_to_list(Bin));
	'LENGTH'              -> list_to_integer(binary_to_list(Bin));
	'LOCALMKTDATE'        -> Bin;
	'MONTHYEAR'           -> <<Y:4/binary, M:2/binary>> = Bin,
	                         {list_to_integer(binary_to_list(Y)),
	                          list_to_integer(binary_to_list(M))};
	'MULTIPLEVALUESTRING' -> binary_to_list(Bin);
	'PRICE'               -> to_float(Bin); 
	'PRICEOFFSET'         -> list_to_integer(binary_to_list(Bin));
	'QTY'                 -> list_to_integer(binary_to_list(Bin));
	'QUANTITY'            -> list_to_integer(binary_to_list(Bin));
	'STRING'              -> binary_to_list(Bin);
	'UTCDATE'             -> binary_to_list(Bin);
	'UTCTIMEONLY'         -> binary_to_list(Bin);
	'UTCTIMESTAMP'        -> to_timestamp(Bin)
	end.

to_float(Bin) ->
	case binary:match(Bin, <<$.>>) of
	nomatch -> list_to_integer(binary_to_list(Bin)) / 1;
	_	    -> list_to_float(binary_to_list(Bin))
	end.
	
to_timestamp(<<Y:4/binary,Mn:2/binary,D:2/binary,$-,H:2/binary,$:,M:2/binary,$:,S:2/binary,$.,MS:3/binary>>) ->
	{{list_to_integer(binary_to_list(Y)),
	  list_to_integer(binary_to_list(Mn)),
	  list_to_integer(binary_to_list(D))},
	 {list_to_integer(binary_to_list(H)),
	  list_to_integer(binary_to_list(M)),
	  list_to_integer(binary_to_list(S))},
	 list_to_integer(binary_to_list(MS))*1000};
to_timestamp(<<Y:4/binary,Mn:2/binary,D:2/binary,$-,H:2/binary,$:,M:2/binary,$:,S:2/binary>>) ->
	{{list_to_integer(binary_to_list(Y)),
	  list_to_integer(binary_to_list(Mn)),
	  list_to_integer(binary_to_list(D))},
	 {list_to_integer(binary_to_list(H)),
	  list_to_integer(binary_to_list(M)),
	  list_to_integer(binary_to_list(S))},
	 0};
to_timestamp(<<Y:4/binary,Mn:2/binary,D:2/binary,$-,H:2/binary,$:,M:2/binary,$:,S:2/binary,$.,MS:6/binary>>) ->
	{{list_to_integer(binary_to_list(Y)),
	  list_to_integer(binary_to_list(Mn)),
	  list_to_integer(binary_to_list(D))},
	 {list_to_integer(binary_to_list(H)),
	  list_to_integer(binary_to_list(M)),
	  list_to_integer(binary_to_list(S))},
	 list_to_integer(binary_to_list(MS))}.


decode_msg_type($0) -> {heartbeat, admin};
decode_msg_type($1) -> {testRequest, admin};
decode_msg_type($2) -> {resendRequest, admin};
decode_msg_type($3) -> {reject, admin};
decode_msg_type($4) -> {sequenceReset, admin};
decode_msg_type($5) -> {logout, admin};
decode_msg_type($6) -> {indicationofInterest, app};
decode_msg_type($7) -> {advertisement, app};
decode_msg_type($8) -> {executionReport, app};
decode_msg_type($9) -> {orderCancelReject, app};
decode_msg_type($A) -> {logon, admin};
decode_msg_type($B) -> {news, app};
decode_msg_type($C) -> {email, app};
decode_msg_type($D) -> {newOrderSingle, app};
decode_msg_type($E) -> {newOrderList, app};
decode_msg_type($F) -> {orderCancelRequest, app};
decode_msg_type($G) -> {orderCancelReplaceRequest, app};
decode_msg_type($H) -> {orderStatusRequest, app};
decode_msg_type($J) -> {allocation, app};
decode_msg_type($K) -> {listCancelRequest, app};
decode_msg_type($L) -> {listExecute, app};
decode_msg_type($M) -> {listStatusRequest, app};
decode_msg_type($N) -> {listStatus, app};
decode_msg_type($P) -> {allocationACK, app};
decode_msg_type($Q) -> {dontKnowTrade, app};
decode_msg_type($R) -> {quoteRequest, app};
decode_msg_type($S) -> {quote, app};
decode_msg_type($T) -> {settlementInstructions, app};
decode_msg_type($V) -> {marketDataRequest, app};
decode_msg_type($W) -> {marketDataSnapshotFullRefresh, app};
decode_msg_type($X) -> {marketDataIncrementalRefresh, app};
decode_msg_type($Y) -> {marketDataRequestReject, app};
decode_msg_type($Z) -> {quoteCancel, app};
decode_msg_type($a) -> {quoteStatusRequest, app};
decode_msg_type($b) -> {quoteAcknowledgement, app};
decode_msg_type($c) -> {securityDefinitionRequest, app};
decode_msg_type($d) -> {securityDefinition, app};
decode_msg_type($e) -> {securityStatusRequest, app};
decode_msg_type($f) -> {securityStatus, app};
decode_msg_type($g) -> {tradingSessionStatusRequest, app};
decode_msg_type($h) -> {tradingSessionStatus, app};
decode_msg_type($i) -> {massQuote, app};
decode_msg_type($j) -> {businessMessageReject, app};
decode_msg_type($k) -> {bidRequest, app};
decode_msg_type($l) -> {bidResponse, app};
decode_msg_type($m) -> {listStrikePrice, app};
decode_msg_type(I)  -> {I, undefined}.


encode_msg_type(heartbeat)                     -> $0;
encode_msg_type(testRequest)                   -> $1;
encode_msg_type(resendRequest)                 -> $2;
encode_msg_type(reject)                        -> $3;
encode_msg_type(sequenceReset)                 -> $4;
encode_msg_type(logout)                        -> $5;
encode_msg_type(indicationofInterest)          -> $6;
encode_msg_type(advertisement)                 -> $7;
encode_msg_type(executionReport)               -> $8;
encode_msg_type(orderCancelReject)             -> $9;
encode_msg_type(logon)                         -> $A;
encode_msg_type(news)                          -> $B;
encode_msg_type(email)                         -> $C;
encode_msg_type(newOrderSingle)                -> $D;
encode_msg_type(newOrderList)                  -> $E;
encode_msg_type(orderCancelRequest)            -> $F;
encode_msg_type(orderCancelReplaceRequest)     -> $G;
encode_msg_type(orderStatusRequest)            -> $H;
encode_msg_type(allocation)                    -> $J;
encode_msg_type(listCancelRequest)             -> $K;
encode_msg_type(listExecute)                   -> $L;
encode_msg_type(listStatusRequest)             -> $M;
encode_msg_type(listStatus)                    -> $N;
encode_msg_type(allocationACK)                 -> $P;
encode_msg_type(dontKnowTrade)                 -> $Q;
encode_msg_type(quoteRequest)                  -> $R;
encode_msg_type(quote)                         -> $S;
encode_msg_type(settlementInstructions)        -> $T;
encode_msg_type(marketDataRequest)             -> $V;
encode_msg_type(marketDataSnapshotFullRefresh) -> $W;
encode_msg_type(marketDataIncrementalRefresh)  -> $X;
encode_msg_type(marketDataRequestReject)       -> $Y;
encode_msg_type(quoteCancel)                   -> $Z;
encode_msg_type(quoteStatusRequest)            -> $a;
encode_msg_type(quoteAcknowledgement)          -> $b;
encode_msg_type(securityDefinitionRequest)     -> $c;
encode_msg_type(securityDefinition)            -> $d;
encode_msg_type(securityStatusRequest)         -> $e;
encode_msg_type(securityStatus)                -> $f;
encode_msg_type(tradingSessionStatusRequest)   -> $g;
encode_msg_type(tradingSessionStatus)          -> $h;
encode_msg_type(massQuote)                     -> $i;
encode_msg_type(businessMessageReject)         -> $j;
encode_msg_type(bidRequest)                    -> $k;
encode_msg_type(bidResponse)                   -> $l;
encode_msg_type(listStrikePrice)               -> $m.

msg_req_field_position($1, 112)  -> 1; % TestReqID
msg_req_field_position($2, 7)    -> 1; % BeginSeqNo
msg_req_field_position($2, 16)   -> 2; % EndSeqNo
msg_req_field_position($3, 45)   -> 1; % RefSeqNum
msg_req_field_position($4, 36)   -> 1; % NewSeqNo
msg_req_field_position($6, 23)   -> 1; % IOIid
msg_req_field_position($6, 28)   -> 2; % IOITransType
msg_req_field_position($6, 55)   -> 3; % Symbol
msg_req_field_position($6, 54)   -> 4; % Side
msg_req_field_position($6, 27)   -> 5; % IOIShares
msg_req_field_position($7, 2)    -> 1; % AdvId
msg_req_field_position($7, 5)    -> 2; % AdvTransType
msg_req_field_position($7, 55)   -> 3; % Symbol
msg_req_field_position($7, 4)    -> 4; % AdvSide
msg_req_field_position($7, 53)   -> 5; % Shares
msg_req_field_position($8, 37)   -> 1; % OrderID
msg_req_field_position($8, 17)   -> 2; % ExecID
msg_req_field_position($8, 20)   -> 3; % ExecTransType
msg_req_field_position($8, 150)  -> 4; % ExecType
msg_req_field_position($8, 39)   -> 5; % OrdStatus
msg_req_field_position($8, 55)   -> 6; % Symbol
msg_req_field_position($8, 54)   -> 7; % Side
msg_req_field_position($8, 151)  -> 8; % LeavesQty
msg_req_field_position($8, 14)   -> 9; % CumQty
msg_req_field_position($8, 6)    -> 10; % AvgPx
msg_req_field_position($9, 37)   -> 1; % OrderID
msg_req_field_position($9, 11)   -> 2; % ClOrdID
msg_req_field_position($9, 41)   -> 3; % OrigClOrdID
msg_req_field_position($9, 39)   -> 4; % OrdStatus
msg_req_field_position($9, 434)  -> 5; % CxlRejResponseTo
msg_req_field_position($A, 98)   -> 1; % EncryptMethod
msg_req_field_position($A, 108)  -> 2; % HeartBtInt
msg_req_field_position($B, 148)  -> 1; % Headline
msg_req_field_position($C, 164)  -> 1; % EmailThreadID
msg_req_field_position($C, 94)   -> 2; % EmailType
msg_req_field_position($C, 147)  -> 3; % Subject
msg_req_field_position($D, 11)   -> 1; % ClOrdID
msg_req_field_position($D, 21)   -> 2; % HandlInst
msg_req_field_position($D, 55)   -> 3; % Symbol
msg_req_field_position($D, 54)   -> 4; % Side
msg_req_field_position($D, 60)   -> 5; % TransactTime
msg_req_field_position($D, 40)   -> 6; % OrdType
msg_req_field_position($E, 66)   -> 1; % ListID
msg_req_field_position($E, 394)  -> 2; % BidType
msg_req_field_position($E, 68)   -> 3; % TotNoOrders
msg_req_field_position($F, 41)   -> 1; % OrigClOrdID
msg_req_field_position($F, 11)   -> 2; % ClOrdID
msg_req_field_position($F, 55)   -> 3; % Symbol
msg_req_field_position($F, 54)   -> 4; % Side
msg_req_field_position($F, 60)   -> 5; % TransactTime
msg_req_field_position($G, 41)   -> 1; % OrigClOrdID
msg_req_field_position($G, 11)   -> 2; % ClOrdID
msg_req_field_position($G, 21)   -> 3; % HandlInst
msg_req_field_position($G, 55)   -> 4; % Symbol
msg_req_field_position($G, 54)   -> 5; % Side
msg_req_field_position($G, 60)   -> 6; % TransactTime
msg_req_field_position($G, 40)   -> 7; % OrdType
msg_req_field_position($H, 11)   -> 1; % ClOrdID
msg_req_field_position($H, 55)   -> 2; % Symbol
msg_req_field_position($H, 54)   -> 3; % Side
msg_req_field_position($J, 70)   -> 1; % AllocID
msg_req_field_position($J, 71)   -> 2; % AllocTransType
msg_req_field_position($J, 54)   -> 3; % Side
msg_req_field_position($J, 55)   -> 4; % Symbol
msg_req_field_position($J, 53)   -> 5; % Shares
msg_req_field_position($J, 6)    -> 6; % AvgPx
msg_req_field_position($J, 75)   -> 7; % TradeDate
msg_req_field_position($K, 66)   -> 1; % ListID
msg_req_field_position($K, 60)   -> 2; % TransactTime
msg_req_field_position($L, 66)   -> 1; % ListID
msg_req_field_position($L, 60)   -> 2; % TransactTime
msg_req_field_position($M, 66)   -> 1; % ListID
msg_req_field_position($N, 66)   -> 1; % ListID
msg_req_field_position($N, 429)  -> 2; % ListStatusType
msg_req_field_position($N, 82)   -> 3; % NoRpts
msg_req_field_position($N, 431)  -> 4; % ListOrderStatus
msg_req_field_position($N, 83)   -> 5; % RptSeq
msg_req_field_position($N, 68)   -> 6; % TotNoOrders
msg_req_field_position($P, 70)   -> 1; % AllocID
msg_req_field_position($P, 75)   -> 2; % TradeDate
msg_req_field_position($P, 87)   -> 3; % AllocStatus
msg_req_field_position($Q, 37)   -> 1; % OrderID
msg_req_field_position($Q, 17)   -> 2; % ExecID
msg_req_field_position($Q, 127)  -> 3; % DKReason
msg_req_field_position($Q, 55)   -> 4; % Symbol
msg_req_field_position($Q, 54)   -> 5; % Side
msg_req_field_position($R, 131)  -> 1; % QuoteReqID
msg_req_field_position($S, 117)  -> 1; % QuoteID
msg_req_field_position($S, 55)   -> 2; % Symbol
msg_req_field_position($T, 162)  -> 1; % SettlInstID
msg_req_field_position($T, 163)  -> 2; % SettlInstTransType
msg_req_field_position($T, 214)  -> 3; % SettlInstRefID
msg_req_field_position($T, 160)  -> 4; % SettlInstMode
msg_req_field_position($T, 165)  -> 5; % SettlInstSource
msg_req_field_position($T, 79)   -> 6; % AllocAccount
msg_req_field_position($T, 60)   -> 7; % TransactTime
msg_req_field_position($V, 262)  -> 1; % MDReqID
msg_req_field_position($V, 263)  -> 2; % SubscriptionRequestType
msg_req_field_position($V, 264)  -> 3; % MarketDepth
msg_req_field_position($W, 55)   -> 1; % Symbol
msg_req_field_position($Y, 262)  -> 1; % MDReqID
msg_req_field_position($Z, 117)  -> 1; % QuoteID
msg_req_field_position($Z, 298)  -> 2; % QuoteCancelType
msg_req_field_position($a, 55)   -> 1; % Symbol
msg_req_field_position($b, 297)  -> 1; % QuoteAckStatus
msg_req_field_position($c, 320)  -> 1; % SecurityReqID
msg_req_field_position($c, 321)  -> 2; % SecurityRequestType
msg_req_field_position($d, 320)  -> 1; % SecurityReqID
msg_req_field_position($d, 322)  -> 2; % SecurityResponseID
msg_req_field_position($d, 393)  -> 3; % TotalNumSecurities
msg_req_field_position($e, 324)  -> 1; % SecurityStatusReqID
msg_req_field_position($e, 55)   -> 2; % Symbol
msg_req_field_position($e, 263)  -> 3; % SubscriptionRequestType
msg_req_field_position($f, 55)   -> 1; % Symbol
msg_req_field_position($g, 335)  -> 1; % TradSesReqID
msg_req_field_position($g, 263)  -> 2; % SubscriptionRequestType
msg_req_field_position($h, 336)  -> 1; % TradingSessionID
msg_req_field_position($h, 340)  -> 2; % TradSesStatus
msg_req_field_position($i, 117)  -> 1; % QuoteID
msg_req_field_position($j, 372)  -> 1; % RefMsgType
msg_req_field_position($j, 380)  -> 2; % BusinessRejectReason
msg_req_field_position($k, 391)  -> 1; % ClientBidID
msg_req_field_position($k, 374)  -> 2; % BidRequestTransType
msg_req_field_position($k, 393)  -> 3; % TotalNumSecurities
msg_req_field_position($k, 394)  -> 4; % BidType
msg_req_field_position($k, 418)  -> 5; % TradeType
msg_req_field_position($k, 419)  -> 6; % BasisPxType
msg_req_field_position($m, 66)   -> 1; % ListID
msg_req_field_position($m, 422)  -> 2; % TotNoStrikes
msg_req_field_position(_,   _) -> not_found.

decode_field(1)     -> {account, 'STRING'};
decode_field(2)     -> {advId, 'STRING'};
decode_field(3)     -> {advRefID, 'STRING'};
decode_field(4)     -> {advSide, 'CHAR'};
decode_field(5)     -> {advTransType, 'STRING'};
decode_field(6)     -> {avgPx, 'PRICE'};
decode_field(7)     -> {beginSeqNo, 'INT'};
decode_field(8)     -> {beginString, 'STRING'};
decode_field(9)     -> {bodyLength, 'INT'};
decode_field(10)    -> {checkSum, 'STRING'};
decode_field(11)    -> {clOrdID, 'STRING'};
decode_field(12)    -> {commission, 'AMT'};
decode_field(13)    -> {commType, 'CHAR'};
decode_field(14)    -> {cumQty, 'QTY'};
decode_field(15)    -> {currency, 'CURRENCY'};
decode_field(16)    -> {endSeqNo, 'INT'};
decode_field(17)    -> {execID, 'STRING'};
decode_field(18)    -> {execInst, 'MULTIPLEVALUESTRING'};
decode_field(19)    -> {execRefID, 'STRING'};
decode_field(20)    -> {execTransType, 'CHAR'};
decode_field(21)    -> {handlInst, 'CHAR'};
decode_field(22)    -> {iDSource, 'STRING'};
decode_field(23)    -> {iOIid, 'STRING'};
decode_field(24)    -> {iOIOthSvc, 'CHAR'};
decode_field(25)    -> {iOIQltyInd, 'CHAR'};
decode_field(26)    -> {iOIRefID, 'STRING'};
decode_field(27)    -> {iOIShares, 'STRING'};
decode_field(28)    -> {iOITransType, 'CHAR'};
decode_field(29)    -> {lastCapacity, 'CHAR'};
decode_field(30)    -> {lastMkt, 'EXCHANGE'};
decode_field(31)    -> {lastPx, 'PRICE'};
decode_field(32)    -> {lastShares, 'QTY'};
decode_field(33)    -> {linesOfText, 'INT'};
decode_field(34)    -> {msgSeqNum, 'INT'};
decode_field(35)    -> {msgType, 'STRING'};
decode_field(36)    -> {newSeqNo, 'INT'};
decode_field(37)    -> {orderID, 'STRING'};
decode_field(38)    -> {orderQty, 'QTY'};
decode_field(39)    -> {ordStatus, 'CHAR'};
decode_field(40)    -> {ordType, 'CHAR'};
decode_field(41)    -> {origClOrdID, 'STRING'};
decode_field(42)    -> {origTime, 'UTCTIMESTAMP'};
decode_field(43)    -> {possDupFlag, 'BOOLEAN'};
decode_field(44)    -> {price, 'PRICE'};
decode_field(45)    -> {refSeqNum, 'INT'};
decode_field(46)    -> {relatdSym, 'STRING'};
decode_field(47)    -> {rule80A, 'CHAR'};
decode_field(48)    -> {securityID, 'STRING'};
decode_field(49)    -> {senderCompID, 'STRING'};
decode_field(50)    -> {senderSubID, 'STRING'};
decode_field(51)    -> {sendingDate, 'LOCALMKTDATE'};
decode_field(52)    -> {sendingTime, 'UTCTIMESTAMP'};
decode_field(53)    -> {shares, 'QTY'};
decode_field(54)    -> {side, 'CHAR'};
decode_field(55)    -> {symbol, 'STRING'};
decode_field(56)    -> {targetCompID, 'STRING'};
decode_field(57)    -> {targetSubID, 'STRING'};
decode_field(58)    -> {text, 'STRING'};
decode_field(59)    -> {timeInForce, 'CHAR'};
decode_field(60)    -> {transactTime, 'UTCTIMESTAMP'};
decode_field(61)    -> {urgency, 'CHAR'};
decode_field(62)    -> {validUntilTime, 'UTCTIMESTAMP'};
decode_field(63)    -> {settlmntTyp, 'CHAR'};
decode_field(64)    -> {futSettDate, 'LOCALMKTDATE'};
decode_field(65)    -> {symbolSfx, 'STRING'};
decode_field(66)    -> {listID, 'STRING'};
decode_field(67)    -> {listSeqNo, 'INT'};
decode_field(68)    -> {totNoOrders, 'INT'};
decode_field(69)    -> {listExecInst, 'STRING'};
decode_field(70)    -> {allocID, 'STRING'};
decode_field(71)    -> {allocTransType, 'CHAR'};
decode_field(72)    -> {refAllocID, 'STRING'};
decode_field(73)    -> {noOrders, 'INT'};
decode_field(74)    -> {avgPrxPrecision, 'INT'};
decode_field(75)    -> {tradeDate, 'LOCALMKTDATE'};
decode_field(76)    -> {execBroker, 'STRING'};
decode_field(77)    -> {openClose, 'CHAR'};
decode_field(78)    -> {noAllocs, 'INT'};
decode_field(79)    -> {allocAccount, 'STRING'};
decode_field(80)    -> {allocShares, 'QTY'};
decode_field(81)    -> {processCode, 'CHAR'};
decode_field(82)    -> {noRpts, 'INT'};
decode_field(83)    -> {rptSeq, 'INT'};
decode_field(84)    -> {cxlQty, 'QTY'};
decode_field(85)    -> {noDlvyInst, 'INT'};
decode_field(86)    -> {dlvyInst, 'STRING'};
decode_field(87)    -> {allocStatus, 'INT'};
decode_field(88)    -> {allocRejCode, 'INT'};
decode_field(89)    -> {signature, 'DATA'};
decode_field(90)    -> {secureDataLen, 'LENGTH'};
decode_field(91)    -> {secureData, 'DATA'};
decode_field(92)    -> {brokerOfCredit, 'STRING'};
decode_field(93)    -> {signatureLength, 'LENGTH'};
decode_field(94)    -> {emailType, 'CHAR'};
decode_field(95)    -> {rawDataLength, 'LENGTH'};
decode_field(96)    -> {rawData, 'DATA'};
decode_field(97)    -> {possResend, 'BOOLEAN'};
decode_field(98)    -> {encryptMethod, 'INT'};
decode_field(99)    -> {stopPx, 'PRICE'};
decode_field(100)   -> {exDestination, 'EXCHANGE'};
decode_field(102)   -> {cxlRejReason, 'INT'};
decode_field(103)   -> {ordRejReason, 'INT'};
decode_field(104)   -> {iOIQualifier, 'CHAR'};
decode_field(105)   -> {waveNo, 'STRING'};
decode_field(106)   -> {issuer, 'STRING'};
decode_field(107)   -> {securityDesc, 'STRING'};
decode_field(108)   -> {heartBtInt, 'INT'};
decode_field(109)   -> {clientID, 'STRING'};
decode_field(110)   -> {minQty, 'QTY'};
decode_field(111)   -> {maxFloor, 'QTY'};
decode_field(112)   -> {testReqID, 'STRING'};
decode_field(113)   -> {reportToExch, 'BOOLEAN'};
decode_field(114)   -> {locateReqd, 'BOOLEAN'};
decode_field(115)   -> {onBehalfOfCompID, 'STRING'};
decode_field(116)   -> {onBehalfOfSubID, 'STRING'};
decode_field(117)   -> {quoteID, 'STRING'};
decode_field(118)   -> {netMoney, 'AMT'};
decode_field(119)   -> {settlCurrAmt, 'AMT'};
decode_field(120)   -> {settlCurrency, 'CURRENCY'};
decode_field(121)   -> {forexReq, 'BOOLEAN'};
decode_field(122)   -> {origSendingTime, 'UTCTIMESTAMP'};
decode_field(123)   -> {gapFillFlag, 'BOOLEAN'};
decode_field(124)   -> {noExecs, 'INT'};
decode_field(125)   -> {cxlType, ' CHAR'};
decode_field(126)   -> {expireTime, 'UTCTIMESTAMP'};
decode_field(127)   -> {dKReason, 'CHAR'};
decode_field(128)   -> {deliverToCompID, 'STRING'};
decode_field(129)   -> {deliverToSubID, 'STRING'};
decode_field(130)   -> {iOINaturalFlag, 'BOOLEAN'};
decode_field(131)   -> {quoteReqID, 'STRING'};
decode_field(132)   -> {bidPx, 'PRICE'};
decode_field(133)   -> {offerPx, 'PRICE'};
decode_field(134)   -> {bidSize, 'QTY'};
decode_field(135)   -> {offerSize, 'QTY'};
decode_field(136)   -> {noMiscFees, 'INT'};
decode_field(137)   -> {miscFeeAmt, 'AMT'};
decode_field(138)   -> {miscFeeCurr, 'CURRENCY'};
decode_field(139)   -> {miscFeeType, 'CHAR'};
decode_field(140)   -> {prevClosePx, 'PRICE'};
decode_field(141)   -> {resetSeqNumFlag, 'BOOLEAN'};
decode_field(142)   -> {senderLocationID, 'STRING'};
decode_field(143)   -> {targetLocationID, 'STRING'};
decode_field(144)   -> {onBehalfOfLocationID, 'STRING'};
decode_field(145)   -> {deliverToLocationID, 'STRING'};
decode_field(146)   -> {noRelatedSym, 'INT'};
decode_field(147)   -> {subject, 'STRING'};
decode_field(148)   -> {headline, 'STRING'};
decode_field(149)   -> {uRLLink, 'STRING'};
decode_field(150)   -> {execType, 'CHAR'};
decode_field(151)   -> {leavesQty, 'QTY'};
decode_field(152)   -> {cashOrderQty, 'QTY'};
decode_field(153)   -> {allocAvgPx, 'PRICE'};
decode_field(154)   -> {allocNetMoney, 'AMT'};
decode_field(155)   -> {settlCurrFxRate, 'FLOAT'};
decode_field(156)   -> {settlCurrFxRateCalc, 'CHAR'};
decode_field(157)   -> {numDaysInterest, 'INT'};
decode_field(158)   -> {accruedInterestRate, 'FLOAT'};
decode_field(159)   -> {accruedInterestAmt, 'AMT'};
decode_field(160)   -> {settlInstMode, 'CHAR'};
decode_field(161)   -> {allocText, 'STRING'};
decode_field(162)   -> {settlInstID, 'STRING'};
decode_field(163)   -> {settlInstTransType, 'CHAR'};
decode_field(164)   -> {emailThreadID, 'STRING'};
decode_field(165)   -> {settlInstSource, 'CHAR'};
decode_field(166)   -> {settlLocation, 'STRING'};
decode_field(167)   -> {securityType, 'STRING'};
decode_field(168)   -> {effectiveTime, 'UTCTIMESTAMP'};
decode_field(169)   -> {standInstDbType, 'INT'};
decode_field(170)   -> {standInstDbName, 'STRING'};
decode_field(171)   -> {standInstDbID, 'STRING'};
decode_field(172)   -> {settlDeliveryType, 'INT'};
decode_field(173)   -> {settlDepositoryCode, 'STRING'};
decode_field(174)   -> {settlBrkrCode, 'STRING'};
decode_field(175)   -> {settlInstCode, 'STRING'};
decode_field(176)   -> {securitySettlAgentName, 'STRING'};
decode_field(177)   -> {securitySettlAgentCode, 'STRING'};
decode_field(178)   -> {securitySettlAgentAcctNum, 'STRING'};
decode_field(179)   -> {securitySettlAgentAcctName, 'STRING'};
decode_field(180)   -> {securitySettlAgentContactName, 'STRING'};
decode_field(181)   -> {securitySettlAgentContactPhone, 'STRING'};
decode_field(182)   -> {cashSettlAgentName, 'STRING'};
decode_field(183)   -> {cashSettlAgentCode, 'STRING'};
decode_field(184)   -> {cashSettlAgentAcctNum, 'STRING'};
decode_field(185)   -> {cashSettlAgentAcctName, 'STRING'};
decode_field(186)   -> {cashSettlAgentContactName, 'STRING'};
decode_field(187)   -> {cashSettlAgentContactPhone, 'STRING'};
decode_field(188)   -> {bidSpotRate, 'PRICE'};
decode_field(189)   -> {bidForwardPoints, 'PRICEOFFSET'};
decode_field(190)   -> {offerSpotRate, 'PRICE'};
decode_field(191)   -> {offerForwardPoints, 'PRICEOFFSET'};
decode_field(192)   -> {orderQty2, 'QTY'};
decode_field(193)   -> {futSettDate2, 'LOCALMKTDATE'};
decode_field(194)   -> {lastSpotRate, 'PRICE'};
decode_field(195)   -> {lastForwardPoints, 'PRICEOFFSET'};
decode_field(196)   -> {allocLinkID, 'STRING'};
decode_field(197)   -> {allocLinkType, 'INT'};
decode_field(198)   -> {secondaryOrderID, 'STRING'};
decode_field(199)   -> {noIOIQualifiers, 'INT'};
decode_field(200)   -> {maturityMonthYear, 'MONTHYEAR'};
decode_field(201)   -> {putOrCall, 'INT'};
decode_field(202)   -> {strikePrice, 'PRICE'};
decode_field(203)   -> {coveredOrUncovered, 'INT'};
decode_field(204)   -> {customerOrFirm, 'INT'};
decode_field(205)   -> {maturityDay, 'DAYOFMONTH'};
decode_field(206)   -> {optAttribute, 'CHAR'};
decode_field(207)   -> {securityExchange, 'EXCHANGE'};
decode_field(208)   -> {notifyBrokerOfCredit, 'BOOLEAN'};
decode_field(209)   -> {allocHandlInst, 'INT'};
decode_field(210)   -> {maxShow, 'QTY'};
decode_field(211)   -> {pegDifference, 'PRICEOFFSET'};
decode_field(212)   -> {xmlDataLen, 'LENGTH'};
decode_field(213)   -> {xmlData, 'DATA'};
decode_field(214)   -> {settlInstRefID, 'STRING'};
decode_field(215)   -> {noRoutingIDs, 'INT'};
decode_field(216)   -> {routingType, 'INT'};
decode_field(217)   -> {routingID, 'STRING'};
decode_field(218)   -> {spreadToBenchmark, 'PRICEOFFSET'};
decode_field(219)   -> {benchmark, 'CHAR'};
decode_field(223)   -> {couponRate, 'FLOAT'};
decode_field(231)   -> {contractMultiplier, 'FLOAT'};
decode_field(262)   -> {mDReqID, 'STRING'};
decode_field(263)   -> {subscriptionRequestType, 'CHAR'};
decode_field(264)   -> {marketDepth, 'INT'};
decode_field(265)   -> {mDUpdateType, 'INT'};
decode_field(266)   -> {aggregatedBook, 'BOOLEAN'};
decode_field(267)   -> {noMDEntryTypes, 'INT'};
decode_field(268)   -> {noMDEntries, 'INT'};
decode_field(269)   -> {mDEntryType, 'CHAR'};
decode_field(270)   -> {mDEntryPx, 'PRICE'};
decode_field(271)   -> {mDEntrySize, 'QTY'};
decode_field(272)   -> {mDEntryDate, 'UTCDATE'};
decode_field(273)   -> {mDEntryTime, 'UTCTIMEONLY'};
decode_field(274)   -> {tickDirection, 'CHAR'};
decode_field(275)   -> {mDMkt, 'EXCHANGE'};
decode_field(276)   -> {quoteCondition, 'MULTIPLEVALUESTRING'};
decode_field(277)   -> {tradeCondition, 'MULTIPLEVALUESTRING'};
decode_field(278)   -> {mDEntryID, 'STRING'};
decode_field(279)   -> {mDUpdateAction, 'CHAR'};
decode_field(280)   -> {mDEntryRefID, 'STRING'};
decode_field(281)   -> {mDReqRejReason, 'CHAR'};
decode_field(282)   -> {mDEntryOriginator, 'STRING'};
decode_field(283)   -> {locationID, 'STRING'};
decode_field(284)   -> {deskID, 'STRING'};
decode_field(285)   -> {deleteReason, 'CHAR'};
decode_field(286)   -> {openCloseSettleFlag, 'CHAR'};
decode_field(287)   -> {sellerDays, 'INT'};
decode_field(288)   -> {mDEntryBuyer, 'STRING'};
decode_field(289)   -> {mDEntrySeller, 'STRING'};
decode_field(290)   -> {mDEntryPositionNo, 'INT'};
decode_field(291)   -> {financialStatus, 'CHAR'};
decode_field(292)   -> {corporateAction, 'CHAR'};
decode_field(293)   -> {defBidSize, 'QTY'};
decode_field(294)   -> {defOfferSize, 'QTY'};
decode_field(295)   -> {noQuoteEntries, 'INT'};
decode_field(296)   -> {noQuoteSets, 'INT'};
decode_field(297)   -> {quoteAckStatus, 'INT'};
decode_field(298)   -> {quoteCancelType, 'INT'};
decode_field(299)   -> {quoteEntryID, 'STRING'};
decode_field(300)   -> {quoteRejectReason, 'INT'};
decode_field(301)   -> {quoteResponseLevel, 'INT'};
decode_field(302)   -> {quoteSetID, 'STRING'};
decode_field(303)   -> {quoteRequestType, 'INT'};
decode_field(304)   -> {totQuoteEntries, 'INT'};
decode_field(305)   -> {underlyingIDSource, 'STRING'};
decode_field(306)   -> {underlyingIssuer, 'STRING'};
decode_field(307)   -> {underlyingSecurityDesc, 'STRING'};
decode_field(308)   -> {underlyingSecurityExchange, 'EXCHANGE'};
decode_field(309)   -> {underlyingSecurityID, 'STRING'};
decode_field(310)   -> {underlyingSecurityType, 'STRING'};
decode_field(311)   -> {underlyingSymbol, 'STRING'};
decode_field(312)   -> {underlyingSymbolSfx, 'STRING'};
decode_field(313)   -> {underlyingMaturityMonthYear, 'MONTHYEAR'};
decode_field(314)   -> {underlyingMaturityDay, 'DAYOFMONTH'};
decode_field(315)   -> {underlyingPutOrCall, 'INT'};
decode_field(316)   -> {underlyingStrikePrice, 'PRICE'};
decode_field(317)   -> {underlyingOptAttribute, 'CHAR'};
decode_field(318)   -> {underlyingCurrency, 'CURRENCY'};
decode_field(319)   -> {ratioQty, 'QUANTITY'};
decode_field(320)   -> {securityReqID, 'STRING'};
decode_field(321)   -> {securityRequestType, 'INT'};
decode_field(322)   -> {securityResponseID, 'STRING'};
decode_field(323)   -> {securityResponseType, 'INT'};
decode_field(324)   -> {securityStatusReqID, 'STRING'};
decode_field(325)   -> {unsolicitedIndicator, 'BOOLEAN'};
decode_field(326)   -> {securityTradingStatus, 'INT'};
decode_field(327)   -> {haltReasonChar, 'CHAR'};
decode_field(328)   -> {inViewOfCommon, 'BOOLEAN'};
decode_field(329)   -> {dueToRelated, 'BOOLEAN'};
decode_field(330)   -> {buyVolume, 'QTY'};
decode_field(331)   -> {sellVolume, 'QTY'};
decode_field(332)   -> {highPx, 'PRICE'};
decode_field(333)   -> {lowPx, 'PRICE'};
decode_field(334)   -> {adjustment, 'INT'};
decode_field(335)   -> {tradSesReqID, 'STRING'};
decode_field(336)   -> {tradingSessionID, 'STRING'};
decode_field(337)   -> {contraTrader, 'STRING'};
decode_field(338)   -> {tradSesMethod, 'INT'};
decode_field(339)   -> {tradSesMode, 'INT'};
decode_field(340)   -> {tradSesStatus, 'INT'};
decode_field(341)   -> {tradSesStartTime, 'UTCTIMESTAMP'};
decode_field(342)   -> {tradSesOpenTime, 'UTCTIMESTAMP'};
decode_field(343)   -> {tradSesPreCloseTime, 'UTCTIMESTAMP'};
decode_field(344)   -> {tradSesCloseTime, 'UTCTIMESTAMP'};
decode_field(345)   -> {tradSesEndTime, 'UTCTIMESTAMP'};
decode_field(346)   -> {numberOfOrders, 'INT'};
decode_field(347)   -> {messageEncoding, 'STRING'};
decode_field(348)   -> {encodedIssuerLen, 'LENGTH'};
decode_field(349)   -> {encodedIssuer, 'DATA'};
decode_field(350)   -> {encodedSecurityDescLen, 'LENGTH'};
decode_field(351)   -> {encodedSecurityDesc, 'DATA'};
decode_field(352)   -> {encodedListExecInstLen, 'LENGTH'};
decode_field(353)   -> {encodedListExecInst, 'DATA'};
decode_field(354)   -> {encodedTextLen, 'LENGTH'};
decode_field(355)   -> {encodedText, 'DATA'};
decode_field(356)   -> {encodedSubjectLen, 'LENGTH'};
decode_field(357)   -> {encodedSubject, 'DATA'};
decode_field(358)   -> {encodedHeadlineLen, 'LENGTH'};
decode_field(359)   -> {encodedHeadline, 'DATA'};
decode_field(360)   -> {encodedAllocTextLen, 'LENGTH'};
decode_field(361)   -> {encodedAllocText, 'DATA'};
decode_field(362)   -> {encodedUnderlyingIssuerLen, 'LENGTH'};
decode_field(363)   -> {encodedUnderlyingIssuer, 'DATA'};
decode_field(364)   -> {encodedUnderlyingSecurityDescLen, 'LENGTH'};
decode_field(365)   -> {encodedUnderlyingSecurityDesc, 'DATA'};
decode_field(366)   -> {allocPrice, 'PRICE'};
decode_field(367)   -> {quoteSetValidUntilTime, 'UTCTIMESTAMP'};
decode_field(368)   -> {quoteEntryRejectReason, 'INT'};
decode_field(369)   -> {lastMsgSeqNumProcessed, 'INT'};
decode_field(370)   -> {onBehalfOfSendingTime, 'UTCTIMESTAMP'};
decode_field(371)   -> {refTagID, 'INT'};
decode_field(372)   -> {refMsgType, 'STRING'};
decode_field(373)   -> {sessionRejectReason, 'INT'};
decode_field(374)   -> {bidRequestTransType, 'CHAR'};
decode_field(375)   -> {contraBroker, 'STRING'};
decode_field(376)   -> {complianceID, 'STRING'};
decode_field(377)   -> {solicitedFlag, 'BOOLEAN'};
decode_field(378)   -> {execRestatementReason, 'INT'};
decode_field(379)   -> {businessRejectRefID, 'STRING'};
decode_field(380)   -> {businessRejectReason, 'INT'};
decode_field(381)   -> {grossTradeAmt, 'AMT'};
decode_field(382)   -> {noContraBrokers, 'INT'};
decode_field(383)   -> {maxMessageSize, 'INT'};
decode_field(384)   -> {noMsgTypes, 'INT'};
decode_field(385)   -> {msgDirection, 'CHAR'};
decode_field(386)   -> {noTradingSessions, 'INT'};
decode_field(387)   -> {totalVolumeTraded, 'QTY'};
decode_field(388)   -> {discretionInst, 'CHAR'};
decode_field(389)   -> {discretionOffset, 'PRICEOFFSET'};
decode_field(390)   -> {bidID, 'STRING'};
decode_field(391)   -> {clientBidID, 'STRING'};
decode_field(392)   -> {listName, 'STRING'};
decode_field(393)   -> {totalNumSecurities, 'INT'};
decode_field(394)   -> {bidType, 'INT'};
decode_field(395)   -> {numTickets, 'INT'};
decode_field(396)   -> {sideValue1, 'AMT'};
decode_field(397)   -> {sideValue2, 'AMT'};
decode_field(398)   -> {noBidDescriptors, 'INT'};
decode_field(399)   -> {bidDescriptorType, 'INT'};
decode_field(400)   -> {bidDescriptor, 'STRING'};
decode_field(401)   -> {sideValueInd, 'INT'};
decode_field(402)   -> {liquidityPctLow, 'FLOAT'};
decode_field(403)   -> {liquidityPctHigh, 'FLOAT'};
decode_field(404)   -> {liquidityValue, 'AMT'};
decode_field(405)   -> {eFPTrackingError, 'FLOAT'};
decode_field(406)   -> {fairValue, 'AMT'};
decode_field(407)   -> {outsideIndexPct, 'FLOAT'};
decode_field(408)   -> {valueOfFutures, 'AMT'};
decode_field(409)   -> {liquidityIndType, 'INT'};
decode_field(410)   -> {wtAverageLiquidity, 'FLOAT'};
decode_field(411)   -> {exchangeForPhysical, 'BOOLEAN'};
decode_field(412)   -> {outMainCntryUIndex, 'AMT'};
decode_field(413)   -> {crossPercent, 'FLOAT'};
decode_field(414)   -> {progRptReqs, 'INT'};
decode_field(415)   -> {progPeriodInterval, 'INT'};
decode_field(416)   -> {incTaxInd, 'INT'};
decode_field(417)   -> {numBidders, 'INT'};
decode_field(418)   -> {tradeType, 'CHAR'};
decode_field(419)   -> {basisPxType, 'CHAR'};
decode_field(420)   -> {noBidComponents, 'INT'};
decode_field(421)   -> {country, 'STRING'};
decode_field(422)   -> {totNoStrikes, 'INT'};
decode_field(423)   -> {priceType, 'INT'};
decode_field(424)   -> {dayOrderQty, 'QTY'};
decode_field(425)   -> {dayCumQty, 'QTY'};
decode_field(426)   -> {dayAvgPx, 'PRICE'};
decode_field(427)   -> {gTBookingInst, 'INT'};
decode_field(428)   -> {noStrikes, 'INT'};
decode_field(429)   -> {listStatusType, 'INT'};
decode_field(430)   -> {netGrossInd, 'INT'};
decode_field(431)   -> {listOrderStatus, 'INT'};
decode_field(432)   -> {expireDate, 'LOCALMKTDATE'};
decode_field(433)   -> {listExecInstType, 'CHAR'};
decode_field(434)   -> {cxlRejResponseTo, 'CHAR'};
decode_field(435)   -> {underlyingCouponRate, 'FLOAT'};
decode_field(436)   -> {underlyingContractMultiplier, 'FLOAT'};
decode_field(437)   -> {contraTradeQty, 'QTY'};
decode_field(438)   -> {contraTradeTime, 'UTCTIMESTAMP'};
decode_field(439)   -> {clearingFirm, 'STRING'};
decode_field(440)   -> {clearingAccount, 'STRING'};
decode_field(441)   -> {liquidityNumSecurities, 'INT'};
decode_field(442)   -> {multiLegReportingType, 'CHAR'};
decode_field(443)   -> {strikeTime, 'UTCTIMESTAMP'};
decode_field(444)   -> {listStatusText, 'STRING'};
decode_field(445)   -> {encodedListStatusTextLen, 'LENGTH'};
decode_field(446)   -> {encodedListStatusText, 'DATA'};
decode_field(Other) -> throw({undef_field, Other}).

encode_field(account)                         -> 1;
encode_field(advId)                           -> 2;
encode_field(advRefID)                        -> 3;
encode_field(advSide)                         -> 4;
encode_field(advTransType)                    -> 5;
encode_field(avgPx)                           -> 6;
encode_field(beginSeqNo)                      -> 7;
encode_field(beginString)                     -> 8;
encode_field(bodyLength)                      -> 9;
encode_field(checkSum)                        -> 10;
encode_field(clOrdID)                         -> 11;
encode_field(commission)                      -> 12;
encode_field(commType)                        -> 13;
encode_field(cumQty)                          -> 14;
encode_field(currency)                        -> 15;
encode_field(endSeqNo)                        -> 16;
encode_field(execID)                          -> 17;
encode_field(execInst)                        -> 18;
encode_field(execRefID)                       -> 19;
encode_field(execTransType)                   -> 20;
encode_field(handlInst)                       -> 21;
encode_field(iDSource)                        -> 22;
encode_field(iOIid)                           -> 23;
encode_field(iOIOthSvc)                       -> 24;
encode_field(iOIQltyInd)                      -> 25;
encode_field(iOIRefID)                        -> 26;
encode_field(iOIShares)                       -> 27;
encode_field(iOITransType)                    -> 28;
encode_field(lastCapacity)                    -> 29;
encode_field(lastMkt)                         -> 30;
encode_field(lastPx)                          -> 31;
encode_field(lastShares)                      -> 32;
encode_field(linesOfText)                     -> 33;
encode_field(msgSeqNum)                       -> 34;
encode_field(msgType)                         -> 35;
encode_field(newSeqNo)                        -> 36;
encode_field(orderID)                         -> 37;
encode_field(orderQty)                        -> 38;
encode_field(ordStatus)                       -> 39;
encode_field(ordType)                         -> 40;
encode_field(origClOrdID)                     -> 41;
encode_field(origTime)                        -> 42;
encode_field(possDupFlag)                     -> 43;
encode_field(price)                           -> 44;
encode_field(refSeqNum)                       -> 45;
encode_field(relatdSym)                       -> 46;
encode_field(rule80A)                         -> 47;
encode_field(securityID)                      -> 48;
encode_field(senderCompID)                    -> 49;
encode_field(senderSubID)                     -> 50;
encode_field(sendingDate)                     -> 51;
encode_field(sendingTime)                     -> 52;
encode_field(shares)                          -> 53;
encode_field(side)                            -> 54;
encode_field(symbol)                          -> 55;
encode_field(targetCompID)                    -> 56;
encode_field(targetSubID)                     -> 57;
encode_field(text)                            -> 58;
encode_field(timeInForce)                     -> 59;
encode_field(transactTime)                    -> 60;
encode_field(urgency)                         -> 61;
encode_field(validUntilTime)                  -> 62;
encode_field(settlmntTyp)                     -> 63;
encode_field(futSettDate)                     -> 64;
encode_field(symbolSfx)                       -> 65;
encode_field(listID)                          -> 66;
encode_field(listSeqNo)                       -> 67;
encode_field(totNoOrders)                     -> 68;
encode_field(listExecInst)                    -> 69;
encode_field(allocID)                         -> 70;
encode_field(allocTransType)                  -> 71;
encode_field(refAllocID)                      -> 72;
encode_field(noOrders)                        -> 73;
encode_field(avgPrxPrecision)                 -> 74;
encode_field(tradeDate)                       -> 75;
encode_field(execBroker)                      -> 76;
encode_field(openClose)                       -> 77;
encode_field(noAllocs)                        -> 78;
encode_field(allocAccount)                    -> 79;
encode_field(allocShares)                     -> 80;
encode_field(processCode)                     -> 81;
encode_field(noRpts)                          -> 82;
encode_field(rptSeq)                          -> 83;
encode_field(cxlQty)                          -> 84;
encode_field(noDlvyInst)                      -> 85;
encode_field(dlvyInst)                        -> 86;
encode_field(allocStatus)                     -> 87;
encode_field(allocRejCode)                    -> 88;
encode_field(signature)                       -> 89;
encode_field(secureDataLen)                   -> 90;
encode_field(secureData)                      -> 91;
encode_field(brokerOfCredit)                  -> 92;
encode_field(signatureLength)                 -> 93;
encode_field(emailType)                       -> 94;
encode_field(rawDataLength)                   -> 95;
encode_field(rawData)                         -> 96;
encode_field(possResend)                      -> 97;
encode_field(encryptMethod)                   -> 98;
encode_field(stopPx)                          -> 99;
encode_field(exDestination)                   -> 100;
encode_field(cxlRejReason)                    -> 102;
encode_field(ordRejReason)                    -> 103;
encode_field(iOIQualifier)                    -> 104;
encode_field(waveNo)                          -> 105;
encode_field(issuer)                          -> 106;
encode_field(securityDesc)                    -> 107;
encode_field(heartBtInt)                      -> 108;
encode_field(clientID)                        -> 109;
encode_field(minQty)                          -> 110;
encode_field(maxFloor)                        -> 111;
encode_field(testReqID)                       -> 112;
encode_field(reportToExch)                    -> 113;
encode_field(locateReqd)                      -> 114;
encode_field(onBehalfOfCompID)                -> 115;
encode_field(onBehalfOfSubID)                 -> 116;
encode_field(quoteID)                         -> 117;
encode_field(netMoney)                        -> 118;
encode_field(settlCurrAmt)                    -> 119;
encode_field(settlCurrency)                   -> 120;
encode_field(forexReq)                        -> 121;
encode_field(origSendingTime)                 -> 122;
encode_field(gapFillFlag)                     -> 123;
encode_field(noExecs)                         -> 124;
encode_field(cxlType)                         -> 125;
encode_field(expireTime)                      -> 126;
encode_field(dKReason)                        -> 127;
encode_field(deliverToCompID)                 -> 128;
encode_field(deliverToSubID)                  -> 129;
encode_field(iOINaturalFlag)                  -> 130;
encode_field(quoteReqID)                      -> 131;
encode_field(bidPx)                           -> 132;
encode_field(offerPx)                         -> 133;
encode_field(bidSize)                         -> 134;
encode_field(offerSize)                       -> 135;
encode_field(noMiscFees)                      -> 136;
encode_field(miscFeeAmt)                      -> 137;
encode_field(miscFeeCurr)                     -> 138;
encode_field(miscFeeType)                     -> 139;
encode_field(prevClosePx)                     -> 140;
encode_field(resetSeqNumFlag)                 -> 141;
encode_field(senderLocationID)                -> 142;
encode_field(targetLocationID)                -> 143;
encode_field(onBehalfOfLocationID)            -> 144;
encode_field(deliverToLocationID)             -> 145;
encode_field(noRelatedSym)                    -> 146;
encode_field(subject)                         -> 147;
encode_field(headline)                        -> 148;
encode_field(uRLLink)                         -> 149;
encode_field(execType)                        -> 150;
encode_field(leavesQty)                       -> 151;
encode_field(cashOrderQty)                    -> 152;
encode_field(allocAvgPx)                      -> 153;
encode_field(allocNetMoney)                   -> 154;
encode_field(settlCurrFxRate)                 -> 155;
encode_field(settlCurrFxRateCalc)             -> 156;
encode_field(numDaysInterest)                 -> 157;
encode_field(accruedInterestRate)             -> 158;
encode_field(accruedInterestAmt)              -> 159;
encode_field(settlInstMode)                   -> 160;
encode_field(allocText)                       -> 161;
encode_field(settlInstID)                     -> 162;
encode_field(settlInstTransType)              -> 163;
encode_field(emailThreadID)                   -> 164;
encode_field(settlInstSource)                 -> 165;
encode_field(settlLocation)                   -> 166;
encode_field(securityType)                    -> 167;
encode_field(effectiveTime)                   -> 168;
encode_field(standInstDbType)                 -> 169;
encode_field(standInstDbName)                 -> 170;
encode_field(standInstDbID)                   -> 171;
encode_field(settlDeliveryType)               -> 172;
encode_field(settlDepositoryCode)             -> 173;
encode_field(settlBrkrCode)                   -> 174;
encode_field(settlInstCode)                   -> 175;
encode_field(securitySettlAgentName)          -> 176;
encode_field(securitySettlAgentCode)          -> 177;
encode_field(securitySettlAgentAcctNum)       -> 178;
encode_field(securitySettlAgentAcctName)      -> 179;
encode_field(securitySettlAgentContactName)   -> 180;
encode_field(securitySettlAgentContactPhone)  -> 181;
encode_field(cashSettlAgentName)              -> 182;
encode_field(cashSettlAgentCode)              -> 183;
encode_field(cashSettlAgentAcctNum)           -> 184;
encode_field(cashSettlAgentAcctName)          -> 185;
encode_field(cashSettlAgentContactName)       -> 186;
encode_field(cashSettlAgentContactPhone)      -> 187;
encode_field(bidSpotRate)                     -> 188;
encode_field(bidForwardPoints)                -> 189;
encode_field(offerSpotRate)                   -> 190;
encode_field(offerForwardPoints)              -> 191;
encode_field(orderQty2)                       -> 192;
encode_field(futSettDate2)                    -> 193;
encode_field(lastSpotRate)                    -> 194;
encode_field(lastForwardPoints)               -> 195;
encode_field(allocLinkID)                     -> 196;
encode_field(allocLinkType)                   -> 197;
encode_field(secondaryOrderID)                -> 198;
encode_field(noIOIQualifiers)                 -> 199;
encode_field(maturityMonthYear)               -> 200;
encode_field(putOrCall)                       -> 201;
encode_field(strikePrice)                     -> 202;
encode_field(coveredOrUncovered)              -> 203;
encode_field(customerOrFirm)                  -> 204;
encode_field(maturityDay)                     -> 205;
encode_field(optAttribute)                    -> 206;
encode_field(securityExchange)                -> 207;
encode_field(notifyBrokerOfCredit)            -> 208;
encode_field(allocHandlInst)                  -> 209;
encode_field(maxShow)                         -> 210;
encode_field(pegDifference)                   -> 211;
encode_field(xmlDataLen)                      -> 212;
encode_field(xmlData)                         -> 213;
encode_field(settlInstRefID)                  -> 214;
encode_field(noRoutingIDs)                    -> 215;
encode_field(routingType)                     -> 216;
encode_field(routingID)                       -> 217;
encode_field(spreadToBenchmark)               -> 218;
encode_field(benchmark)                       -> 219;
encode_field(couponRate)                      -> 223;
encode_field(contractMultiplier)              -> 231;
encode_field(mDReqID)                         -> 262;
encode_field(subscriptionRequestType)         -> 263;
encode_field(marketDepth)                     -> 264;
encode_field(mDUpdateType)                    -> 265;
encode_field(aggregatedBook)                  -> 266;
encode_field(noMDEntryTypes)                  -> 267;
encode_field(noMDEntries)                     -> 268;
encode_field(mDEntryType)                     -> 269;
encode_field(mDEntryPx)                       -> 270;
encode_field(mDEntrySize)                     -> 271;
encode_field(mDEntryDate)                     -> 272;
encode_field(mDEntryTime)                     -> 273;
encode_field(tickDirection)                   -> 274;
encode_field(mDMkt)                           -> 275;
encode_field(quoteCondition)                  -> 276;
encode_field(tradeCondition)                  -> 277;
encode_field(mDEntryID)                       -> 278;
encode_field(mDUpdateAction)                  -> 279;
encode_field(mDEntryRefID)                    -> 280;
encode_field(mDReqRejReason)                  -> 281;
encode_field(mDEntryOriginator)               -> 282;
encode_field(locationID)                      -> 283;
encode_field(deskID)                          -> 284;
encode_field(deleteReason)                    -> 285;
encode_field(openCloseSettleFlag)             -> 286;
encode_field(sellerDays)                      -> 287;
encode_field(mDEntryBuyer)                    -> 288;
encode_field(mDEntrySeller)                   -> 289;
encode_field(mDEntryPositionNo)               -> 290;
encode_field(financialStatus)                 -> 291;
encode_field(corporateAction)                 -> 292;
encode_field(defBidSize)                      -> 293;
encode_field(defOfferSize)                    -> 294;
encode_field(noQuoteEntries)                  -> 295;
encode_field(noQuoteSets)                     -> 296;
encode_field(quoteAckStatus)                  -> 297;
encode_field(quoteCancelType)                 -> 298;
encode_field(quoteEntryID)                    -> 299;
encode_field(quoteRejectReason)               -> 300;
encode_field(quoteResponseLevel)              -> 301;
encode_field(quoteSetID)                      -> 302;
encode_field(quoteRequestType)                -> 303;
encode_field(totQuoteEntries)                 -> 304;
encode_field(underlyingIDSource)              -> 305;
encode_field(underlyingIssuer)                -> 306;
encode_field(underlyingSecurityDesc)          -> 307;
encode_field(underlyingSecurityExchange)      -> 308;
encode_field(underlyingSecurityID)            -> 309;
encode_field(underlyingSecurityType)          -> 310;
encode_field(underlyingSymbol)                -> 311;
encode_field(underlyingSymbolSfx)             -> 312;
encode_field(underlyingMaturityMonthYear)     -> 313;
encode_field(underlyingMaturityDay)           -> 314;
encode_field(underlyingPutOrCall)             -> 315;
encode_field(underlyingStrikePrice)           -> 316;
encode_field(underlyingOptAttribute)          -> 317;
encode_field(underlyingCurrency)              -> 318;
encode_field(ratioQty)                        -> 319;
encode_field(securityReqID)                   -> 320;
encode_field(securityRequestType)             -> 321;
encode_field(securityResponseID)              -> 322;
encode_field(securityResponseType)            -> 323;
encode_field(securityStatusReqID)             -> 324;
encode_field(unsolicitedIndicator)            -> 325;
encode_field(securityTradingStatus)           -> 326;
encode_field(haltReasonChar)                  -> 327;
encode_field(inViewOfCommon)                  -> 328;
encode_field(dueToRelated)                    -> 329;
encode_field(buyVolume)                       -> 330;
encode_field(sellVolume)                      -> 331;
encode_field(highPx)                          -> 332;
encode_field(lowPx)                           -> 333;
encode_field(adjustment)                      -> 334;
encode_field(tradSesReqID)                    -> 335;
encode_field(tradingSessionID)                -> 336;
encode_field(contraTrader)                    -> 337;
encode_field(tradSesMethod)                   -> 338;
encode_field(tradSesMode)                     -> 339;
encode_field(tradSesStatus)                   -> 340;
encode_field(tradSesStartTime)                -> 341;
encode_field(tradSesOpenTime)                 -> 342;
encode_field(tradSesPreCloseTime)             -> 343;
encode_field(tradSesCloseTime)                -> 344;
encode_field(tradSesEndTime)                  -> 345;
encode_field(numberOfOrders)                  -> 346;
encode_field(messageEncoding)                 -> 347;
encode_field(encodedIssuerLen)                -> 348;
encode_field(encodedIssuer)                   -> 349;
encode_field(encodedSecurityDescLen)          -> 350;
encode_field(encodedSecurityDesc)             -> 351;
encode_field(encodedListExecInstLen)          -> 352;
encode_field(encodedListExecInst)             -> 353;
encode_field(encodedTextLen)                  -> 354;
encode_field(encodedText)                     -> 355;
encode_field(encodedSubjectLen)               -> 356;
encode_field(encodedSubject)                  -> 357;
encode_field(encodedHeadlineLen)              -> 358;
encode_field(encodedHeadline)                 -> 359;
encode_field(encodedAllocTextLen)             -> 360;
encode_field(encodedAllocText)                -> 361;
encode_field(encodedUnderlyingIssuerLen)      -> 362;
encode_field(encodedUnderlyingIssuer)         -> 363;
encode_field(encodedUnderlyingSecurityDescLen) -> 364;
encode_field(encodedUnderlyingSecurityDesc)   -> 365;
encode_field(allocPrice)                      -> 366;
encode_field(quoteSetValidUntilTime)          -> 367;
encode_field(quoteEntryRejectReason)          -> 368;
encode_field(lastMsgSeqNumProcessed)          -> 369;
encode_field(onBehalfOfSendingTime)           -> 370;
encode_field(refTagID)                        -> 371;
encode_field(refMsgType)                      -> 372;
encode_field(sessionRejectReason)             -> 373;
encode_field(bidRequestTransType)             -> 374;
encode_field(contraBroker)                    -> 375;
encode_field(complianceID)                    -> 376;
encode_field(solicitedFlag)                   -> 377;
encode_field(execRestatementReason)           -> 378;
encode_field(businessRejectRefID)             -> 379;
encode_field(businessRejectReason)            -> 380;
encode_field(grossTradeAmt)                   -> 381;
encode_field(noContraBrokers)                 -> 382;
encode_field(maxMessageSize)                  -> 383;
encode_field(noMsgTypes)                      -> 384;
encode_field(msgDirection)                    -> 385;
encode_field(noTradingSessions)               -> 386;
encode_field(totalVolumeTraded)               -> 387;
encode_field(discretionInst)                  -> 388;
encode_field(discretionOffset)                -> 389;
encode_field(bidID)                           -> 390;
encode_field(clientBidID)                     -> 391;
encode_field(listName)                        -> 392;
encode_field(totalNumSecurities)              -> 393;
encode_field(bidType)                         -> 394;
encode_field(numTickets)                      -> 395;
encode_field(sideValue1)                      -> 396;
encode_field(sideValue2)                      -> 397;
encode_field(noBidDescriptors)                -> 398;
encode_field(bidDescriptorType)               -> 399;
encode_field(bidDescriptor)                   -> 400;
encode_field(sideValueInd)                    -> 401;
encode_field(liquidityPctLow)                 -> 402;
encode_field(liquidityPctHigh)                -> 403;
encode_field(liquidityValue)                  -> 404;
encode_field(eFPTrackingError)                -> 405;
encode_field(fairValue)                       -> 406;
encode_field(outsideIndexPct)                 -> 407;
encode_field(valueOfFutures)                  -> 408;
encode_field(liquidityIndType)                -> 409;
encode_field(wtAverageLiquidity)              -> 410;
encode_field(exchangeForPhysical)             -> 411;
encode_field(outMainCntryUIndex)              -> 412;
encode_field(crossPercent)                    -> 413;
encode_field(progRptReqs)                     -> 414;
encode_field(progPeriodInterval)              -> 415;
encode_field(incTaxInd)                       -> 416;
encode_field(numBidders)                      -> 417;
encode_field(tradeType)                       -> 418;
encode_field(basisPxType)                     -> 419;
encode_field(noBidComponents)                 -> 420;
encode_field(country)                         -> 421;
encode_field(totNoStrikes)                    -> 422;
encode_field(priceType)                       -> 423;
encode_field(dayOrderQty)                     -> 424;
encode_field(dayCumQty)                       -> 425;
encode_field(dayAvgPx)                        -> 426;
encode_field(gTBookingInst)                   -> 427;
encode_field(noStrikes)                       -> 428;
encode_field(listStatusType)                  -> 429;
encode_field(netGrossInd)                     -> 430;
encode_field(listOrderStatus)                 -> 431;
encode_field(expireDate)                      -> 432;
encode_field(listExecInstType)                -> 433;
encode_field(cxlRejResponseTo)                -> 434;
encode_field(underlyingCouponRate)            -> 435;
encode_field(underlyingContractMultiplier)    -> 436;
encode_field(contraTradeQty)                  -> 437;
encode_field(contraTradeTime)                 -> 438;
encode_field(clearingFirm)                    -> 439;
encode_field(clearingAccount)                 -> 440;
encode_field(liquidityNumSecurities)          -> 441;
encode_field(multiLegReportingType)           -> 442;
encode_field(strikeTime)                      -> 443;
encode_field(listStatusText)                  -> 444;
encode_field(encodedListStatusTextLen)        -> 445;
encode_field(encodedListStatusText)           -> 446;
encode_field(Other)                           -> throw({undef_field, Other}).


decode_value(1, Bin)                     -> decode_field_value(1, 'STRING', Bin);
decode_value(2, Bin)                     -> decode_field_value(2, 'STRING', Bin);
decode_value(3, Bin)                     -> decode_field_value(3, 'STRING', Bin);
decode_value(4, <<$B>>)                  -> 'buy';
decode_value(4, <<$S>>)                  -> 'sell';
decode_value(4, <<$T>>)                  -> 'trade';
decode_value(4, <<$X>>)                  -> 'cross';
decode_value(5, <<"C">>)                 -> 'cancel';
decode_value(5, <<"N">>)                 -> 'new';
decode_value(5, <<"R">>)                 -> 'replace';
decode_value(6, Bin)                     -> decode_field_value(6, 'PRICE', Bin);
decode_value(7, Bin)                     -> decode_field_value(7, 'INT', Bin);
decode_value(8, Bin)                     -> decode_field_value(8, 'STRING', Bin);
decode_value(9, Bin)                     -> decode_field_value(9, 'INT', Bin);
decode_value(10, Bin)                    -> decode_field_value(10, 'STRING', Bin);
decode_value(11, Bin)                    -> decode_field_value(11, 'STRING', Bin);
decode_value(12, Bin)                    -> decode_field_value(12, 'AMT', Bin);
decode_value(13, <<$1>>)                 -> 'per_share';
decode_value(13, <<$2>>)                 -> 'percentage';
decode_value(13, <<$3>>)                 -> 'absolute';
decode_value(14, Bin)                    -> decode_field_value(14, 'QTY', Bin);
decode_value(15, Bin)                    -> decode_field_value(15, 'CURRENCY', Bin);
decode_value(16, Bin)                    -> decode_field_value(16, 'INT', Bin);
decode_value(17, Bin)                    -> decode_field_value(17, 'STRING', Bin);
decode_value(18, <<$0>>)                 -> 'stay_on_offerside';
decode_value(18, <<$1>>)                 -> 'not_held';
decode_value(18, <<$2>>)                 -> 'work';
decode_value(18, <<$3>>)                 -> 'go_along';
decode_value(18, <<$4>>)                 -> 'over_the_day';
decode_value(18, <<$5>>)                 -> 'held';
decode_value(18, <<$6>>)                 -> 'participate_dont_initiate';
decode_value(18, <<$7>>)                 -> 'strict_scale';
decode_value(18, <<$8>>)                 -> 'try_to_scale';
decode_value(18, <<$9>>)                 -> 'stay_on_bidside';
decode_value(18, <<$A>>)                 -> 'no_cross';
decode_value(18, <<$B>>)                 -> 'ok_to_cross';
decode_value(18, <<$C>>)                 -> 'call_first';
decode_value(18, <<$D>>)                 -> 'percent_of_volume';
decode_value(18, <<$E>>)                 -> 'do_not_increase';
decode_value(18, <<$F>>)                 -> 'do_not_reduce';
decode_value(18, <<$G>>)                 -> 'all_or_none';
decode_value(18, <<$I>>)                 -> 'institutions_only';
decode_value(18, <<$L>>)                 -> 'last_peg';
decode_value(18, <<$M>>)                 -> 'mid_price_peg';
decode_value(18, <<$N>>)                 -> 'non_negotiable';
decode_value(18, <<$O>>)                 -> 'opening_peg';
decode_value(18, <<$P>>)                 -> 'market_peg';
decode_value(18, <<$R>>)                 -> 'primary_peg';
decode_value(18, <<$S>>)                 -> 'suspend';
decode_value(18, <<$T>>)                 -> 'fixed_peg_to_local_best_bid_or_offer_at_time_of_or';
decode_value(18, <<$U>>)                 -> 'customer_display_instruction';
decode_value(18, <<$V>>)                 -> 'netting';
decode_value(18, <<$W>>)                 -> 'peg_to_vwap';
decode_value(19, Bin)                    -> decode_field_value(19, 'STRING', Bin);
decode_value(20, <<$0>>)                 -> 'new';
decode_value(20, <<$1>>)                 -> 'cancel';
decode_value(20, <<$2>>)                 -> 'correct';
decode_value(20, <<$3>>)                 -> 'status';
decode_value(21, <<$1>>)                 -> 'automated_execution_order_private_no_broker_interv';
decode_value(21, <<$2>>)                 -> 'automated_execution_order_public_broker_interventi';
decode_value(21, <<$3>>)                 -> 'manual_order_best_execution';
decode_value(22, <<"1">>)                -> 'cusip';
decode_value(22, <<"2">>)                -> 'sedol';
decode_value(22, <<"3">>)                -> 'quik';
decode_value(22, <<"4">>)                -> 'isin_number';
decode_value(22, <<"5">>)                -> 'ric_code';
decode_value(22, <<"6">>)                -> 'iso_currency_code';
decode_value(22, <<"7">>)                -> 'iso_country_code';
decode_value(22, <<"8">>)                -> 'exchange_symbol';
decode_value(22, <<"9">>)                -> 'consolidated_tape_association';
decode_value(23, Bin)                    -> decode_field_value(23, 'STRING', Bin);
decode_value(24, Bin)                    -> decode_field_value(24, 'CHAR', Bin);
decode_value(25, <<$H>>)                 -> 'high';
decode_value(25, <<$L>>)                 -> 'low';
decode_value(25, <<$M>>)                 -> 'medium';
decode_value(26, Bin)                    -> decode_field_value(26, 'STRING', Bin);
decode_value(27, <<"L">>)                -> 'large';
decode_value(27, <<"M">>)                -> 'medium';
decode_value(27, <<"S">>)                -> 'small';
decode_value(28, <<$C>>)                 -> 'cancel';
decode_value(28, <<$N>>)                 -> 'new';
decode_value(28, <<$R>>)                 -> 'replace';
decode_value(29, <<$1>>)                 -> 'agent';
decode_value(29, <<$2>>)                 -> 'cross_as_agent';
decode_value(29, <<$3>>)                 -> 'cross_as_principal';
decode_value(29, <<$4>>)                 -> 'principal';
decode_value(30, Bin)                    -> decode_field_value(30, 'EXCHANGE', Bin);
decode_value(31, Bin)                    -> decode_field_value(31, 'PRICE', Bin);
decode_value(32, Bin)                    -> decode_field_value(32, 'QTY', Bin);
decode_value(33, Bin)                    -> decode_field_value(33, 'INT', Bin);
decode_value(34, Bin)                    -> decode_field_value(34, 'INT', Bin);
decode_value(35, <<"0">>)                -> 'heartbeat';
decode_value(35, <<"1">>)                -> 'test_request';
decode_value(35, <<"2">>)                -> 'resend_request';
decode_value(35, <<"3">>)                -> 'reject';
decode_value(35, <<"4">>)                -> 'sequence_reset';
decode_value(35, <<"5">>)                -> 'logout';
decode_value(35, <<"6">>)                -> 'indication_of_interest';
decode_value(35, <<"7">>)                -> 'advertisement';
decode_value(35, <<"8">>)                -> 'execution_report';
decode_value(35, <<"9">>)                -> 'order_cancel_reject';
decode_value(35, <<"a">>)                -> 'quote_status_request';
decode_value(35, <<"A">>)                -> 'logon';
decode_value(35, <<"B">>)                -> 'news';
decode_value(35, <<"b">>)                -> 'quote_acknowledgement';
decode_value(35, <<"C">>)                -> 'email';
decode_value(35, <<"c">>)                -> 'security_definition_request';
decode_value(35, <<"D">>)                -> 'order_single';
decode_value(35, <<"d">>)                -> 'security_definition';
decode_value(35, <<"E">>)                -> 'order_list';
decode_value(35, <<"e">>)                -> 'security_status_request';
decode_value(35, <<"f">>)                -> 'security_status';
decode_value(35, <<"F">>)                -> 'order_cancel_request';
decode_value(35, <<"G">>)                -> 'order_cancel_replace_request';
decode_value(35, <<"g">>)                -> 'trading_session_status_request';
decode_value(35, <<"H">>)                -> 'order_status_request';
decode_value(35, <<"h">>)                -> 'trading_session_status';
decode_value(35, <<"i">>)                -> 'mass_quote';
decode_value(35, <<"j">>)                -> 'business_message_reject';
decode_value(35, <<"J">>)                -> 'allocation';
decode_value(35, <<"K">>)                -> 'list_cancel_request';
decode_value(35, <<"k">>)                -> 'bid_request';
decode_value(35, <<"l">>)                -> 'bid_response';
decode_value(35, <<"L">>)                -> 'list_execute';
decode_value(35, <<"m">>)                -> 'list_strike_price';
decode_value(35, <<"M">>)                -> 'list_status_request';
decode_value(35, <<"N">>)                -> 'list_status';
decode_value(35, <<"P">>)                -> 'allocation_ack';
decode_value(35, <<"Q">>)                -> 'dont_know_trade';
decode_value(35, <<"R">>)                -> 'quote_request';
decode_value(35, <<"S">>)                -> 'quote';
decode_value(35, <<"T">>)                -> 'settlement_instructions';
decode_value(35, <<"V">>)                -> 'market_data_request';
decode_value(35, <<"W">>)                -> 'market_data_snapshot_full_refresh';
decode_value(35, <<"X">>)                -> 'market_data_incremental_refresh';
decode_value(35, <<"Y">>)                -> 'market_data_request_reject';
decode_value(35, <<"Z">>)                -> 'quote_cancel';
decode_value(36, Bin)                    -> decode_field_value(36, 'INT', Bin);
decode_value(37, Bin)                    -> decode_field_value(37, 'STRING', Bin);
decode_value(38, Bin)                    -> decode_field_value(38, 'QTY', Bin);
decode_value(39, <<$0>>)                 -> 'new';
decode_value(39, <<$1>>)                 -> 'partially_filled';
decode_value(39, <<$2>>)                 -> 'filled';
decode_value(39, <<$3>>)                 -> 'done_for_day';
decode_value(39, <<$4>>)                 -> 'canceled';
decode_value(39, <<$5>>)                 -> 'replaced';
decode_value(39, <<$6>>)                 -> 'pending_cancel';
decode_value(39, <<$7>>)                 -> 'stopped';
decode_value(39, <<$8>>)                 -> 'rejected';
decode_value(39, <<$9>>)                 -> 'suspended';
decode_value(39, <<$A>>)                 -> 'pending_new';
decode_value(39, <<$B>>)                 -> 'calculated';
decode_value(39, <<$C>>)                 -> 'expired';
decode_value(39, <<$D>>)                 -> 'accepted_for_bidding';
decode_value(39, <<$E>>)                 -> 'pending_replace';
decode_value(40, <<$1>>)                 -> 'market';
decode_value(40, <<$2>>)                 -> 'limit';
decode_value(40, <<$3>>)                 -> 'stop';
decode_value(40, <<$4>>)                 -> 'stop_limit';
decode_value(40, <<$5>>)                 -> 'market_on_close';
decode_value(40, <<$6>>)                 -> 'with_or_without';
decode_value(40, <<$7>>)                 -> 'limit_or_better';
decode_value(40, <<$8>>)                 -> 'limit_with_or_without';
decode_value(40, <<$9>>)                 -> 'on_basis';
decode_value(40, <<$A>>)                 -> 'on_close';
decode_value(40, <<$B>>)                 -> 'limit_on_close';
decode_value(40, <<$C>>)                 -> 'forex_c';
decode_value(40, <<$D>>)                 -> 'previously_quoted';
decode_value(40, <<$E>>)                 -> 'previously_indicated';
decode_value(40, <<$F>>)                 -> 'forex_f';
decode_value(40, <<$G>>)                 -> 'forex_g';
decode_value(40, <<$H>>)                 -> 'forex_h';
decode_value(40, <<$I>>)                 -> 'funari';
decode_value(40, <<$P>>)                 -> 'pegged';
decode_value(41, Bin)                    -> decode_field_value(41, 'STRING', Bin);
decode_value(42, Bin)                    -> decode_field_value(42, 'UTCTIMESTAMP', Bin);
decode_value(43, <<$N>>)                 -> 'no';
decode_value(43, <<$Y>>)                 -> 'yes';
decode_value(44, Bin)                    -> decode_field_value(44, 'PRICE', Bin);
decode_value(45, Bin)                    -> decode_field_value(45, 'INT', Bin);
decode_value(46, Bin)                    -> decode_field_value(46, 'STRING', Bin);
decode_value(47, <<$A>>)                 -> 'agency_single_order';
decode_value(47, <<$B>>)                 -> 'short_exempt_transaction_b';
decode_value(47, <<$C>>)                 -> 'program_order_non_index_arb_for_member_firm_org';
decode_value(47, <<$D>>)                 -> 'program_order_index_arb_for_member_firm_org';
decode_value(47, <<$E>>)                 -> 'registered_equity_market_maker_trades';
decode_value(47, <<$F>>)                 -> 'short_exempt_transaction_f';
decode_value(47, <<$H>>)                 -> 'short_exempt_transaction_h';
decode_value(47, <<$I>>)                 -> 'individual_investor_single_order';
decode_value(47, <<$J>>)                 -> 'program_order_index_arb_for_individual_customer';
decode_value(47, <<$K>>)                 -> 'program_order_non_index_arb_for_individual_custome';
decode_value(47, <<$L>>)                 -> 'short_exempt_transaction_for_member_competing_mark';
decode_value(47, <<$M>>)                 -> 'program_order_index_arb_for_other_member';
decode_value(47, <<$N>>)                 -> 'program_order_non_index_arb_for_other_member';
decode_value(47, <<$O>>)                 -> 'competing_dealer_trades_o';
decode_value(47, <<$P>>)                 -> 'principal';
decode_value(47, <<$R>>)                 -> 'competing_dealer_trades_r';
decode_value(47, <<$S>>)                 -> 'specialist_trades';
decode_value(47, <<$T>>)                 -> 'competing_dealer_trades_t';
decode_value(47, <<$U>>)                 -> 'program_order_index_arb_for_other_agency';
decode_value(47, <<$W>>)                 -> 'all_other_orders_as_agent_for_other_member';
decode_value(47, <<$X>>)                 -> 'short_exempt_transaction_for_member_competing_mark';
decode_value(47, <<$Y>>)                 -> 'program_order_non_index_arb_for_other_agency';
decode_value(47, <<$Z>>)                 -> 'short_exempt_transaction_for_non_member_competing_';
decode_value(48, Bin)                    -> decode_field_value(48, 'STRING', Bin);
decode_value(49, Bin)                    -> decode_field_value(49, 'STRING', Bin);
decode_value(50, Bin)                    -> decode_field_value(50, 'STRING', Bin);
decode_value(51, Bin)                    -> decode_field_value(51, 'LOCALMKTDATE', Bin);
decode_value(52, Bin)                    -> decode_field_value(52, 'UTCTIMESTAMP', Bin);
decode_value(53, Bin)                    -> decode_field_value(53, 'QTY', Bin);
decode_value(54, <<$1>>)                 -> 'buy';
decode_value(54, <<$2>>)                 -> 'sell';
decode_value(54, <<$3>>)                 -> 'buy_minus';
decode_value(54, <<$4>>)                 -> 'sell_plus';
decode_value(54, <<$5>>)                 -> 'sell_short';
decode_value(54, <<$6>>)                 -> 'sell_short_exempt';
decode_value(54, <<$7>>)                 -> 'undisclosed';
decode_value(54, <<$8>>)                 -> 'cross';
decode_value(54, <<$9>>)                 -> 'cross_short';
decode_value(55, Bin)                    -> decode_field_value(55, 'ATOM', Bin);
decode_value(56, Bin)                    -> decode_field_value(56, 'STRING', Bin);
decode_value(57, Bin)                    -> decode_field_value(57, 'STRING', Bin);
decode_value(58, Bin)                    -> decode_field_value(58, 'STRING', Bin);
decode_value(59, <<$0>>)                 -> 'day';
decode_value(59, <<$1>>)                 -> 'good_till_cancel';
decode_value(59, <<$2>>)                 -> 'at_the_opening';
decode_value(59, <<$3>>)                 -> 'immediate_or_cancel';
decode_value(59, <<$4>>)                 -> 'fill_or_kill';
decode_value(59, <<$5>>)                 -> 'good_till_crossing';
decode_value(59, <<$6>>)                 -> 'good_till_date';
decode_value(60, Bin)                    -> decode_field_value(60, 'UTCTIMESTAMP', Bin);
decode_value(61, <<$0>>)                 -> 'normal';
decode_value(61, <<$1>>)                 -> 'flash';
decode_value(61, <<$2>>)                 -> 'background';
decode_value(62, Bin)                    -> decode_field_value(62, 'UTCTIMESTAMP', Bin);
decode_value(63, <<$0>>)                 -> 'regular';
decode_value(63, <<$1>>)                 -> 'cash';
decode_value(63, <<$2>>)                 -> 'next_day';
decode_value(63, <<$3>>)                 -> 't_plus_2';
decode_value(63, <<$4>>)                 -> 't_plus_3';
decode_value(63, <<$5>>)                 -> 't_plus_4';
decode_value(63, <<$6>>)                 -> 'future';
decode_value(63, <<$7>>)                 -> 'when_issued';
decode_value(63, <<$8>>)                 -> 'sellers_option';
decode_value(63, <<$9>>)                 -> 't_plus_5';
decode_value(64, Bin)                    -> decode_field_value(64, 'LOCALMKTDATE', Bin);
decode_value(65, Bin)                    -> decode_field_value(65, 'STRING', Bin);
decode_value(66, Bin)                    -> decode_field_value(66, 'STRING', Bin);
decode_value(67, Bin)                    -> decode_field_value(67, 'INT', Bin);
decode_value(68, Bin)                    -> decode_field_value(68, 'INT', Bin);
decode_value(69, Bin)                    -> decode_field_value(69, 'STRING', Bin);
decode_value(70, Bin)                    -> decode_field_value(70, 'STRING', Bin);
decode_value(71, <<$0>>)                 -> 'new';
decode_value(71, <<$1>>)                 -> 'replace';
decode_value(71, <<$2>>)                 -> 'cancel';
decode_value(71, <<$3>>)                 -> 'preliminary';
decode_value(71, <<$4>>)                 -> 'calculated';
decode_value(71, <<$5>>)                 -> 'calculated_without_preliminary';
decode_value(72, Bin)                    -> decode_field_value(72, 'STRING', Bin);
decode_value(73, Bin)                    -> decode_field_value(73, 'INT', Bin);
decode_value(74, Bin)                    -> decode_field_value(74, 'INT', Bin);
decode_value(75, Bin)                    -> decode_field_value(75, 'LOCALMKTDATE', Bin);
decode_value(76, Bin)                    -> decode_field_value(76, 'STRING', Bin);
decode_value(77, <<$C>>)                 -> 'close';
decode_value(77, <<$O>>)                 -> 'open';
decode_value(78, Bin)                    -> decode_field_value(78, 'INT', Bin);
decode_value(79, Bin)                    -> decode_field_value(79, 'STRING', Bin);
decode_value(80, Bin)                    -> decode_field_value(80, 'QTY', Bin);
decode_value(81, <<$0>>)                 -> 'regular';
decode_value(81, <<$1>>)                 -> 'soft_dollar';
decode_value(81, <<$2>>)                 -> 'step_in';
decode_value(81, <<$3>>)                 -> 'step_out';
decode_value(81, <<$4>>)                 -> 'soft_dollar_step_in';
decode_value(81, <<$5>>)                 -> 'soft_dollar_step_out';
decode_value(81, <<$6>>)                 -> 'plan_sponsor';
decode_value(82, Bin)                    -> decode_field_value(82, 'INT', Bin);
decode_value(83, Bin)                    -> decode_field_value(83, 'INT', Bin);
decode_value(84, Bin)                    -> decode_field_value(84, 'QTY', Bin);
decode_value(85, Bin)                    -> decode_field_value(85, 'INT', Bin);
decode_value(86, Bin)                    -> decode_field_value(86, 'STRING', Bin);
decode_value(87, <<"0">>)                -> 'accepted';
decode_value(87, <<"1">>)                -> 'rejected';
decode_value(87, <<"2">>)                -> 'partial_accept';
decode_value(87, <<"3">>)                -> 'received';
decode_value(88, <<"0">>)                -> 'unknown_account';
decode_value(88, <<"1">>)                -> 'incorrect_quantity';
decode_value(88, <<"2">>)                -> 'incorrect_average_price';
decode_value(88, <<"3">>)                -> 'unknown_executing_broker_mnemonic';
decode_value(88, <<"4">>)                -> 'commission_difference';
decode_value(88, <<"5">>)                -> 'unknown_orderid';
decode_value(88, <<"6">>)                -> 'unknown_listid';
decode_value(88, <<"7">>)                -> 'other';
decode_value(89, Bin)                    -> decode_field_value(89, 'DATA', Bin);
decode_value(90, Bin)                    -> decode_field_value(90, 'LENGTH', Bin);
decode_value(91, Bin)                    -> decode_field_value(91, 'DATA', Bin);
decode_value(92, Bin)                    -> decode_field_value(92, 'STRING', Bin);
decode_value(93, Bin)                    -> decode_field_value(93, 'LENGTH', Bin);
decode_value(94, <<$0>>)                 -> 'new';
decode_value(94, <<$1>>)                 -> 'reply';
decode_value(94, <<$2>>)                 -> 'admin_reply';
decode_value(95, Bin)                    -> decode_field_value(95, 'LENGTH', Bin);
decode_value(96, Bin)                    -> decode_field_value(96, 'DATA', Bin);
decode_value(97, <<$N>>)                 -> 'no';
decode_value(97, <<$Y>>)                 -> 'yes';
decode_value(98, <<"0">>)                -> 'none';
decode_value(98, <<"1">>)                -> 'pkcs';
decode_value(98, <<"2">>)                -> 'des';
decode_value(98, <<"3">>)                -> 'pkcs_des';
decode_value(98, <<"4">>)                -> 'pgp_des';
decode_value(98, <<"5">>)                -> 'pgp_des_md5';
decode_value(98, <<"6">>)                -> 'pem_des_md5';
decode_value(99, Bin)                    -> decode_field_value(99, 'PRICE', Bin);
decode_value(100, Bin)                   -> decode_field_value(100, 'EXCHANGE', Bin);
decode_value(102, <<"0">>)               -> 'too_late_to_cancel';
decode_value(102, <<"1">>)               -> 'unknown_order';
decode_value(102, <<"2">>)               -> 'broker_option';
decode_value(102, <<"3">>)               -> 'order_already_in_pending_cancel_or_pending_replace';
decode_value(103, <<"0">>)               -> 'broker_option';
decode_value(103, <<"1">>)               -> 'unknown_symbol';
decode_value(103, <<"2">>)               -> 'exchange_closed';
decode_value(103, <<"3">>)               -> 'order_exceeds_limit';
decode_value(103, <<"4">>)               -> 'too_late_to_enter';
decode_value(103, <<"5">>)               -> 'unknown_order';
decode_value(103, <<"6">>)               -> 'duplicate_order';
decode_value(103, <<"7">>)               -> 'duplicate_of_a_verbally_communicated_order';
decode_value(103, <<"8">>)               -> 'stale_order';
decode_value(104, <<$A>>)                -> 'all_or_none';
decode_value(104, <<$C>>)                -> 'at_the_close';
decode_value(104, <<$I>>)                -> 'in_touch_with';
decode_value(104, <<$L>>)                -> 'limit';
decode_value(104, <<$M>>)                -> 'more_behind';
decode_value(104, <<$O>>)                -> 'at_the_open';
decode_value(104, <<$P>>)                -> 'taking_a_position';
decode_value(104, <<$Q>>)                -> 'at_the_market';
decode_value(104, <<$R>>)                -> 'ready_to_trade';
decode_value(104, <<$S>>)                -> 'portfolio_show_n';
decode_value(104, <<$T>>)                -> 'through_the_day';
decode_value(104, <<$V>>)                -> 'versus';
decode_value(104, <<$W>>)                -> 'indication';
decode_value(104, <<$X>>)                -> 'crossing_opportunity';
decode_value(104, <<$Y>>)                -> 'at_the_midpoint';
decode_value(104, <<$Z>>)                -> 'pre_open';
decode_value(105, Bin)                   -> decode_field_value(105, 'STRING', Bin);
decode_value(106, Bin)                   -> decode_field_value(106, 'STRING', Bin);
decode_value(107, Bin)                   -> decode_field_value(107, 'STRING', Bin);
decode_value(108, Bin)                   -> decode_field_value(108, 'INT', Bin);
decode_value(109, Bin)                   -> decode_field_value(109, 'STRING', Bin);
decode_value(110, Bin)                   -> decode_field_value(110, 'QTY', Bin);
decode_value(111, Bin)                   -> decode_field_value(111, 'QTY', Bin);
decode_value(112, Bin)                   -> decode_field_value(112, 'STRING', Bin);
decode_value(113, <<$N>>)                -> 'no';
decode_value(113, <<$Y>>)                -> 'yes';
decode_value(114, <<$N>>)                -> 'no';
decode_value(114, <<$Y>>)                -> 'yes';
decode_value(115, Bin)                   -> decode_field_value(115, 'STRING', Bin);
decode_value(116, Bin)                   -> decode_field_value(116, 'STRING', Bin);
decode_value(117, Bin)                   -> decode_field_value(117, 'STRING', Bin);
decode_value(118, Bin)                   -> decode_field_value(118, 'AMT', Bin);
decode_value(119, Bin)                   -> decode_field_value(119, 'AMT', Bin);
decode_value(120, Bin)                   -> decode_field_value(120, 'CURRENCY', Bin);
decode_value(121, <<$N>>)                -> 'no';
decode_value(121, <<$Y>>)                -> 'yes';
decode_value(122, Bin)                   -> decode_field_value(122, 'UTCTIMESTAMP', Bin);
decode_value(123, <<$N>>)                -> 'no';
decode_value(123, <<$Y>>)                -> 'yes';
decode_value(124, Bin)                   -> decode_field_value(124, 'INT', Bin);
decode_value(125, Bin)                   -> decode_field_value(125, ' CHAR', Bin);
decode_value(126, Bin)                   -> decode_field_value(126, 'UTCTIMESTAMP', Bin);
decode_value(127, <<$A>>)                -> 'unknown_symbol';
decode_value(127, <<$B>>)                -> 'wrong_side';
decode_value(127, <<$C>>)                -> 'quantity_exceeds_order';
decode_value(127, <<$D>>)                -> 'no_matching_order';
decode_value(127, <<$E>>)                -> 'price_exceeds_limit';
decode_value(127, <<$Z>>)                -> 'other';
decode_value(128, Bin)                   -> decode_field_value(128, 'STRING', Bin);
decode_value(129, Bin)                   -> decode_field_value(129, 'STRING', Bin);
decode_value(130, <<$N>>)                -> 'no';
decode_value(130, <<$Y>>)                -> 'yes';
decode_value(131, Bin)                   -> decode_field_value(131, 'STRING', Bin);
decode_value(132, Bin)                   -> decode_field_value(132, 'PRICE', Bin);
decode_value(133, Bin)                   -> decode_field_value(133, 'PRICE', Bin);
decode_value(134, Bin)                   -> decode_field_value(134, 'QTY', Bin);
decode_value(135, Bin)                   -> decode_field_value(135, 'QTY', Bin);
decode_value(136, Bin)                   -> decode_field_value(136, 'INT', Bin);
decode_value(137, Bin)                   -> decode_field_value(137, 'AMT', Bin);
decode_value(138, Bin)                   -> decode_field_value(138, 'CURRENCY', Bin);
decode_value(139, <<$1>>)                -> 'regulatory';
decode_value(139, <<$2>>)                -> 'tax';
decode_value(139, <<$3>>)                -> 'local_commission';
decode_value(139, <<$4>>)                -> 'exchange_fees';
decode_value(139, <<$5>>)                -> 'stamp';
decode_value(139, <<$6>>)                -> 'levy';
decode_value(139, <<$7>>)                -> 'other';
decode_value(139, <<$8>>)                -> 'markup';
decode_value(139, <<$9>>)                -> 'consumption_tax';
decode_value(140, Bin)                   -> decode_field_value(140, 'PRICE', Bin);
decode_value(141, <<$N>>)                -> 'no';
decode_value(141, <<$Y>>)                -> 'yes';
decode_value(142, Bin)                   -> decode_field_value(142, 'STRING', Bin);
decode_value(143, Bin)                   -> decode_field_value(143, 'STRING', Bin);
decode_value(144, Bin)                   -> decode_field_value(144, 'STRING', Bin);
decode_value(145, Bin)                   -> decode_field_value(145, 'STRING', Bin);
decode_value(146, Bin)                   -> decode_field_value(146, 'INT', Bin);
decode_value(147, Bin)                   -> decode_field_value(147, 'STRING', Bin);
decode_value(148, Bin)                   -> decode_field_value(148, 'STRING', Bin);
decode_value(149, Bin)                   -> decode_field_value(149, 'STRING', Bin);
decode_value(150, <<$0>>)                -> 'new';
decode_value(150, <<$1>>)                -> 'partial_fill';
decode_value(150, <<$2>>)                -> 'fill';
decode_value(150, <<$3>>)                -> 'done_for_day';
decode_value(150, <<$4>>)                -> 'canceled';
decode_value(150, <<$5>>)                -> 'replace';
decode_value(150, <<$6>>)                -> 'pending_cancel';
decode_value(150, <<$7>>)                -> 'stopped';
decode_value(150, <<$8>>)                -> 'rejected';
decode_value(150, <<$9>>)                -> 'suspended';
decode_value(150, <<$A>>)                -> 'pending_new';
decode_value(150, <<$B>>)                -> 'calculated';
decode_value(150, <<$C>>)                -> 'expired';
decode_value(150, <<$D>>)                -> 'restated';
decode_value(150, <<$E>>)                -> 'pending_replace';
decode_value(151, Bin)                   -> decode_field_value(151, 'QTY', Bin);
decode_value(152, Bin)                   -> decode_field_value(152, 'QTY', Bin);
decode_value(153, Bin)                   -> decode_field_value(153, 'PRICE', Bin);
decode_value(154, Bin)                   -> decode_field_value(154, 'AMT', Bin);
decode_value(155, Bin)                   -> decode_field_value(155, 'FLOAT', Bin);
decode_value(156, <<$M>>)                -> 'multiply';
decode_value(156, <<$D>>)                -> 'divide';
decode_value(157, Bin)                   -> decode_field_value(157, 'INT', Bin);
decode_value(158, Bin)                   -> decode_field_value(158, 'FLOAT', Bin);
decode_value(159, Bin)                   -> decode_field_value(159, 'AMT', Bin);
decode_value(160, <<$0>>)                -> 'default';
decode_value(160, <<$1>>)                -> 'standing_instructions_provided';
decode_value(160, <<$2>>)                -> 'specific_allocation_account_overriding';
decode_value(160, <<$3>>)                -> 'specific_allocation_account_standing';
decode_value(161, Bin)                   -> decode_field_value(161, 'STRING', Bin);
decode_value(162, Bin)                   -> decode_field_value(162, 'STRING', Bin);
decode_value(163, <<$C>>)                -> 'cancel';
decode_value(163, <<$N>>)                -> 'new';
decode_value(163, <<$R>>)                -> 'replace';
decode_value(164, Bin)                   -> decode_field_value(164, 'STRING', Bin);
decode_value(165, <<$1>>)                -> 'brokers_instructions';
decode_value(165, <<$2>>)                -> 'institutions_instructions';
decode_value(166, <<"CED">>)             -> 'cedel';
decode_value(166, <<"DTC">>)             -> 'depository_trust_company';
decode_value(166, <<"EUR">>)             -> 'euroclear';
decode_value(166, <<"FED">>)             -> 'federal_book_entry';
decode_value(166, <<"ISO Country Code">>)  -> 'local_market_settle_location';
decode_value(166, <<"PNY">>)             -> 'physical';
decode_value(166, <<"PTC">>)             -> 'participant_trust_company';
decode_value(167, <<"?">>)               -> 'wildcard_entry';
decode_value(167, <<"BA">>)              -> 'bankers_acceptance';
decode_value(167, <<"CB">>)              -> 'convertible_bond';
decode_value(167, <<"CD">>)              -> 'certificate_of_deposit';
decode_value(167, <<"CMO">>)             -> 'collateralize_mortgage_obligation';
decode_value(167, <<"CORP">>)            -> 'corporate_bond';
decode_value(167, <<"CP">>)              -> 'commercial_paper';
decode_value(167, <<"CPP">>)             -> 'corporate_private_placement';
decode_value(167, <<"CS">>)              -> 'common_stock';
decode_value(167, <<"FHA">>)             -> 'federal_housing_authority';
decode_value(167, <<"FHL">>)             -> 'federal_home_loan';
decode_value(167, <<"FN">>)              -> 'federal_national_mortgage_association';
decode_value(167, <<"FOR">>)             -> 'foreign_exchange_contract';
decode_value(167, <<"FUT">>)             -> 'future';
decode_value(167, <<"GN">>)              -> 'government_national_mortgage_association';
decode_value(167, <<"GOVT">>)            -> 'treasuries_plus_agency_debenture';
decode_value(167, <<"IET">>)             -> 'mortgage_ioette';
decode_value(167, <<"MF">>)              -> 'mutual_fund';
decode_value(167, <<"MIO">>)             -> 'mortgage_interest_only';
decode_value(167, <<"MPO">>)             -> 'mortgage_principal_only';
decode_value(167, <<"MPP">>)             -> 'mortgage_private_placement';
decode_value(167, <<"MPT">>)             -> 'miscellaneous_pass_thru';
decode_value(167, <<"MUNI">>)            -> 'municipal_bond';
decode_value(167, <<"NONE">>)            -> 'no_isitc_security_type';
decode_value(167, <<"OPT">>)             -> 'option';
decode_value(167, <<"PS">>)              -> 'preferred_stock';
decode_value(167, <<"RP">>)              -> 'repurchase_agreement';
decode_value(167, <<"RVRP">>)            -> 'reverse_repurchase_agreement';
decode_value(167, <<"SL">>)              -> 'student_loan_marketing_association';
decode_value(167, <<"TD">>)              -> 'time_deposit';
decode_value(167, <<"USTB">>)            -> 'us_treasury_bill';
decode_value(167, <<"WAR">>)             -> 'warrant';
decode_value(167, <<"ZOO">>)             -> 'cats_tigers_lions';
decode_value(168, Bin)                   -> decode_field_value(168, 'UTCTIMESTAMP', Bin);
decode_value(169, <<"0">>)               -> 'other';
decode_value(169, <<"1">>)               -> 'dtc_sid';
decode_value(169, <<"2">>)               -> 'thomson_alert';
decode_value(169, <<"3">>)               -> 'a_global_custodian';
decode_value(170, Bin)                   -> decode_field_value(170, 'STRING', Bin);
decode_value(171, Bin)                   -> decode_field_value(171, 'STRING', Bin);
decode_value(172, Bin)                   -> decode_field_value(172, 'INT', Bin);
decode_value(173, Bin)                   -> decode_field_value(173, 'STRING', Bin);
decode_value(174, Bin)                   -> decode_field_value(174, 'STRING', Bin);
decode_value(175, Bin)                   -> decode_field_value(175, 'STRING', Bin);
decode_value(176, Bin)                   -> decode_field_value(176, 'STRING', Bin);
decode_value(177, Bin)                   -> decode_field_value(177, 'STRING', Bin);
decode_value(178, Bin)                   -> decode_field_value(178, 'STRING', Bin);
decode_value(179, Bin)                   -> decode_field_value(179, 'STRING', Bin);
decode_value(180, Bin)                   -> decode_field_value(180, 'STRING', Bin);
decode_value(181, Bin)                   -> decode_field_value(181, 'STRING', Bin);
decode_value(182, Bin)                   -> decode_field_value(182, 'STRING', Bin);
decode_value(183, Bin)                   -> decode_field_value(183, 'STRING', Bin);
decode_value(184, Bin)                   -> decode_field_value(184, 'STRING', Bin);
decode_value(185, Bin)                   -> decode_field_value(185, 'STRING', Bin);
decode_value(186, Bin)                   -> decode_field_value(186, 'STRING', Bin);
decode_value(187, Bin)                   -> decode_field_value(187, 'STRING', Bin);
decode_value(188, Bin)                   -> decode_field_value(188, 'PRICE', Bin);
decode_value(189, Bin)                   -> decode_field_value(189, 'PRICEOFFSET', Bin);
decode_value(190, Bin)                   -> decode_field_value(190, 'PRICE', Bin);
decode_value(191, Bin)                   -> decode_field_value(191, 'PRICEOFFSET', Bin);
decode_value(192, Bin)                   -> decode_field_value(192, 'QTY', Bin);
decode_value(193, Bin)                   -> decode_field_value(193, 'LOCALMKTDATE', Bin);
decode_value(194, Bin)                   -> decode_field_value(194, 'PRICE', Bin);
decode_value(195, Bin)                   -> decode_field_value(195, 'PRICEOFFSET', Bin);
decode_value(196, Bin)                   -> decode_field_value(196, 'STRING', Bin);
decode_value(197, <<"0">>)               -> 'f_x_netting';
decode_value(197, <<"1">>)               -> 'f_x_swap';
decode_value(198, Bin)                   -> decode_field_value(198, 'STRING', Bin);
decode_value(199, Bin)                   -> decode_field_value(199, 'INT', Bin);
decode_value(200, Bin)                   -> decode_field_value(200, 'MONTHYEAR', Bin);
decode_value(201, <<"0">>)               -> 'put';
decode_value(201, <<"1">>)               -> 'call';
decode_value(202, Bin)                   -> decode_field_value(202, 'PRICE', Bin);
decode_value(203, <<"0">>)               -> 'covered';
decode_value(203, <<"1">>)               -> 'uncovered';
decode_value(204, <<"0">>)               -> 'customer';
decode_value(204, <<"1">>)               -> 'firm';
decode_value(205, Bin)                   -> decode_field_value(205, 'DAYOFMONTH', Bin);
decode_value(206, Bin)                   -> decode_field_value(206, 'CHAR', Bin);
decode_value(207, Bin)                   -> decode_field_value(207, 'EXCHANGE', Bin);
decode_value(208, <<$N>>)                -> 'no';
decode_value(208, <<$Y>>)                -> 'yes';
decode_value(209, <<"1">>)               -> 'match';
decode_value(209, <<"2">>)               -> 'forward';
decode_value(209, <<"3">>)               -> 'forward_and_match';
decode_value(210, Bin)                   -> decode_field_value(210, 'QTY', Bin);
decode_value(211, Bin)                   -> decode_field_value(211, 'PRICEOFFSET', Bin);
decode_value(212, Bin)                   -> decode_field_value(212, 'LENGTH', Bin);
decode_value(213, Bin)                   -> decode_field_value(213, 'DATA', Bin);
decode_value(214, Bin)                   -> decode_field_value(214, 'STRING', Bin);
decode_value(215, Bin)                   -> decode_field_value(215, 'INT', Bin);
decode_value(216, <<"1">>)               -> 'target_firm';
decode_value(216, <<"2">>)               -> 'target_list';
decode_value(216, <<"3">>)               -> 'block_firm';
decode_value(216, <<"4">>)               -> 'block_list';
decode_value(217, Bin)                   -> decode_field_value(217, 'STRING', Bin);
decode_value(218, Bin)                   -> decode_field_value(218, 'PRICEOFFSET', Bin);
decode_value(219, <<$1>>)                -> 'curve';
decode_value(219, <<$2>>)                -> '5_yr';
decode_value(219, <<$3>>)                -> 'old_5';
decode_value(219, <<$4>>)                -> '10_yr';
decode_value(219, <<$5>>)                -> 'old_10';
decode_value(219, <<$6>>)                -> '30_yr';
decode_value(219, <<$7>>)                -> 'old_30';
decode_value(219, <<$8>>)                -> '3_mo_libor';
decode_value(219, <<$9>>)                -> '6_mo_libor';
decode_value(223, Bin)                   -> decode_field_value(223, 'FLOAT', Bin);
decode_value(231, Bin)                   -> decode_field_value(231, 'FLOAT', Bin);
decode_value(262, Bin)                   -> decode_field_value(262, 'STRING', Bin);
decode_value(263, <<$0>>)                -> 'snapshot';
decode_value(263, <<$1>>)                -> 'snapshot_plus_updates';
decode_value(263, <<$2>>)                -> 'disable_previous_snapshot_plus_update_request';
decode_value(264, Bin)                   -> decode_field_value(264, 'INT', Bin);
decode_value(265, <<"0">>)               -> 'full_refresh';
decode_value(265, <<"1">>)               -> 'incremental_refresh';
decode_value(266, <<$N>>)                -> 'no';
decode_value(266, <<$Y>>)                -> 'yes';
decode_value(267, Bin)                   -> decode_field_value(267, 'INT', Bin);
decode_value(268, Bin)                   -> decode_field_value(268, 'INT', Bin);
decode_value(269, <<$0>>)                -> 'bid';
decode_value(269, <<$1>>)                -> 'offer';
decode_value(269, <<$2>>)                -> 'trade';
decode_value(269, <<$3>>)                -> 'index_value';
decode_value(269, <<$4>>)                -> 'opening_price';
decode_value(269, <<$5>>)                -> 'closing_price';
decode_value(269, <<$6>>)                -> 'settlement_price';
decode_value(269, <<$7>>)                -> 'trading_session_high_price';
decode_value(269, <<$8>>)                -> 'trading_session_low_price';
decode_value(269, <<$9>>)                -> 'trading_session_vwap_price';
decode_value(270, Bin)                   -> decode_field_value(270, 'PRICE', Bin);
decode_value(271, Bin)                   -> decode_field_value(271, 'QTY', Bin);
decode_value(272, Bin)                   -> decode_field_value(272, 'UTCDATE', Bin);
decode_value(273, Bin)                   -> decode_field_value(273, 'UTCTIMEONLY', Bin);
decode_value(274, <<$0>>)                -> 'plus_tick';
decode_value(274, <<$1>>)                -> 'zero_plus_tick';
decode_value(274, <<$2>>)                -> 'minus_tick';
decode_value(274, <<$3>>)                -> 'zero_minus_tick';
decode_value(275, Bin)                   -> decode_field_value(275, 'EXCHANGE', Bin);
decode_value(276, <<$A>>)                -> 'open';
decode_value(276, <<$B>>)                -> 'closed';
decode_value(276, <<$C>>)                -> 'exchange_best';
decode_value(276, <<$D>>)                -> 'consolidated_best';
decode_value(276, <<$E>>)                -> 'locked';
decode_value(276, <<$F>>)                -> 'crossed';
decode_value(276, <<$G>>)                -> 'depth';
decode_value(276, <<$H>>)                -> 'fast_trading';
decode_value(276, <<$I>>)                -> 'non_firm';
decode_value(277, <<$A>>)                -> 'cash';
decode_value(277, <<$B>>)                -> 'average_price_trade';
decode_value(277, <<$C>>)                -> 'cash_trade';
decode_value(277, <<$D>>)                -> 'next_day';
decode_value(277, <<$E>>)                -> 'opening';
decode_value(277, <<$F>>)                -> 'intraday_trade_detail';
decode_value(277, <<$G>>)                -> 'rule_127_trade';
decode_value(277, <<$H>>)                -> 'rule_155_trade';
decode_value(277, <<$I>>)                -> 'sold_last';
decode_value(277, <<$J>>)                -> 'next_day_trade';
decode_value(277, <<$K>>)                -> 'opened';
decode_value(277, <<$L>>)                -> 'seller';
decode_value(277, <<$M>>)                -> 'sold';
decode_value(277, <<$N>>)                -> 'stopped_stock';
decode_value(278, Bin)                   -> decode_field_value(278, 'STRING', Bin);
decode_value(279, <<$0>>)                -> 'new';
decode_value(279, <<$1>>)                -> 'change';
decode_value(279, <<$2>>)                -> 'delete';
decode_value(280, Bin)                   -> decode_field_value(280, 'STRING', Bin);
decode_value(281, <<$0>>)                -> 'unknown_symbol';
decode_value(281, <<$1>>)                -> 'duplicate_mdreqid';
decode_value(281, <<$2>>)                -> 'insufficient_bandwidth';
decode_value(281, <<$3>>)                -> 'insufficient_permissions';
decode_value(281, <<$4>>)                -> 'unsupported_subscriptionrequesttype';
decode_value(281, <<$5>>)                -> 'unsupported_marketdepth';
decode_value(281, <<$6>>)                -> 'unsupported_mdupdatetype';
decode_value(281, <<$7>>)                -> 'unsupported_aggregatedbook';
decode_value(281, <<$8>>)                -> 'unsupported_mdentrytype';
decode_value(282, Bin)                   -> decode_field_value(282, 'STRING', Bin);
decode_value(283, Bin)                   -> decode_field_value(283, 'STRING', Bin);
decode_value(284, Bin)                   -> decode_field_value(284, 'STRING', Bin);
decode_value(285, <<$0>>)                -> 'cancelation';
decode_value(285, <<$1>>)                -> 'error';
decode_value(286, <<$0>>)                -> 'daily_open';
decode_value(286, <<$1>>)                -> 'session_open';
decode_value(286, <<$2>>)                -> 'delivery_settlement_price';
decode_value(287, Bin)                   -> decode_field_value(287, 'INT', Bin);
decode_value(288, Bin)                   -> decode_field_value(288, 'STRING', Bin);
decode_value(289, Bin)                   -> decode_field_value(289, 'STRING', Bin);
decode_value(290, Bin)                   -> decode_field_value(290, 'INT', Bin);
decode_value(291, <<$1>>)                -> 'bankrupt';
decode_value(292, <<$A>>)                -> 'ex_dividend';
decode_value(292, <<$B>>)                -> 'ex_distribution';
decode_value(292, <<$C>>)                -> 'ex_rights';
decode_value(292, <<$D>>)                -> 'new';
decode_value(292, <<$E>>)                -> 'ex_interest';
decode_value(293, Bin)                   -> decode_field_value(293, 'QTY', Bin);
decode_value(294, Bin)                   -> decode_field_value(294, 'QTY', Bin);
decode_value(295, Bin)                   -> decode_field_value(295, 'INT', Bin);
decode_value(296, Bin)                   -> decode_field_value(296, 'INT', Bin);
decode_value(297, <<"0">>)               -> 'accepted';
decode_value(297, <<"1">>)               -> 'canceled_for_symbol';
decode_value(297, <<"2">>)               -> 'canceled_for_security_type';
decode_value(297, <<"3">>)               -> 'canceled_for_underlying';
decode_value(297, <<"4">>)               -> 'canceled_all';
decode_value(297, <<"5">>)               -> 'rejected';
decode_value(298, <<"1">>)               -> 'cancel_for_symbol';
decode_value(298, <<"2">>)               -> 'cancel_for_security_type';
decode_value(298, <<"3">>)               -> 'cancel_for_underlying_symbol';
decode_value(298, <<"4">>)               -> 'cancel_for_all_quotes';
decode_value(299, Bin)                   -> decode_field_value(299, 'STRING', Bin);
decode_value(300, <<"1">>)               -> 'unknown_symbol';
decode_value(300, <<"2">>)               -> 'exchange';
decode_value(300, <<"3">>)               -> 'quote_request_exceeds_limit';
decode_value(300, <<"4">>)               -> 'too_late_to_enter';
decode_value(300, <<"5">>)               -> 'unknown_quote';
decode_value(300, <<"6">>)               -> 'duplicate_quote';
decode_value(300, <<"7">>)               -> 'invalid_bid_ask_spread';
decode_value(300, <<"8">>)               -> 'invalid_price';
decode_value(300, <<"9">>)               -> 'not_authorized_to_quote_security';
decode_value(301, <<"0">>)               -> 'no_acknowledgement';
decode_value(301, <<"1">>)               -> 'acknowledge_only_negative_or_erroneous_quotes';
decode_value(301, <<"2">>)               -> 'acknowledge_each_quote_messages';
decode_value(302, Bin)                   -> decode_field_value(302, 'STRING', Bin);
decode_value(303, <<"1">>)               -> 'manual';
decode_value(303, <<"2">>)               -> 'automatic';
decode_value(304, Bin)                   -> decode_field_value(304, 'INT', Bin);
decode_value(305, Bin)                   -> decode_field_value(305, 'STRING', Bin);
decode_value(306, Bin)                   -> decode_field_value(306, 'STRING', Bin);
decode_value(307, Bin)                   -> decode_field_value(307, 'STRING', Bin);
decode_value(308, Bin)                   -> decode_field_value(308, 'EXCHANGE', Bin);
decode_value(309, Bin)                   -> decode_field_value(309, 'STRING', Bin);
decode_value(310, Bin)                   -> decode_field_value(310, 'STRING', Bin);
decode_value(311, Bin)                   -> decode_field_value(311, 'STRING', Bin);
decode_value(312, Bin)                   -> decode_field_value(312, 'STRING', Bin);
decode_value(313, Bin)                   -> decode_field_value(313, 'MONTHYEAR', Bin);
decode_value(314, Bin)                   -> decode_field_value(314, 'DAYOFMONTH', Bin);
decode_value(315, Bin)                   -> decode_field_value(315, 'INT', Bin);
decode_value(316, Bin)                   -> decode_field_value(316, 'PRICE', Bin);
decode_value(317, Bin)                   -> decode_field_value(317, 'CHAR', Bin);
decode_value(318, Bin)                   -> decode_field_value(318, 'CURRENCY', Bin);
decode_value(319, Bin)                   -> decode_field_value(319, 'QUANTITY', Bin);
decode_value(320, Bin)                   -> decode_field_value(320, 'STRING', Bin);
decode_value(321, <<"0">>)               -> 'request_security_identity_and_specifications';
decode_value(321, <<"1">>)               -> 'request_security_identity_for_the_specifications_p';
decode_value(321, <<"2">>)               -> 'request_list_security_types';
decode_value(321, <<"3">>)               -> 'request_list_securities';
decode_value(322, Bin)                   -> decode_field_value(322, 'STRING', Bin);
decode_value(323, <<"1">>)               -> 'accept_security_proposal_as_is';
decode_value(323, <<"2">>)               -> 'accept_security_proposal_with_revisions_as_indicat';
decode_value(323, <<"3">>)               -> 'list_of_security_types_returned_per_request';
decode_value(323, <<"4">>)               -> 'list_of_securities_returned_per_request';
decode_value(323, <<"5">>)               -> 'reject_security_proposal';
decode_value(323, <<"6">>)               -> 'can_not_match_selection_criteria';
decode_value(324, Bin)                   -> decode_field_value(324, 'STRING', Bin);
decode_value(325, <<$N>>)                -> 'no';
decode_value(325, <<$Y>>)                -> 'yes';
decode_value(326, <<"1">>)               -> 'opening_delay';
decode_value(326, <<"10">>)              -> 'market_on_close_imbalance_sell';
decode_value(326, <<"11">>)              -> '11';
decode_value(326, <<"12">>)              -> 'no_market_imbalance';
decode_value(326, <<"13">>)              -> 'no_market_on_close_imbalance';
decode_value(326, <<"14">>)              -> 'its_pre_opening';
decode_value(326, <<"15">>)              -> 'new_price_indication';
decode_value(326, <<"16">>)              -> 'trade_dissemination_time';
decode_value(326, <<"17">>)              -> 'ready_to_trade';
decode_value(326, <<"18">>)              -> 'not_available_for_trading';
decode_value(326, <<"19">>)              -> 'not_traded_on_this_market';
decode_value(326, <<"2">>)               -> 'trading_halt';
decode_value(326, <<"20">>)              -> 'unknown_or_invalid';
decode_value(326, <<"3">>)               -> 'resume';
decode_value(326, <<"4">>)               -> 'no_open_no_resume';
decode_value(326, <<"5">>)               -> 'price_indication';
decode_value(326, <<"6">>)               -> 'trading_range_indication';
decode_value(326, <<"7">>)               -> 'market_imbalance_buy';
decode_value(326, <<"8">>)               -> 'market_imbalance_sell';
decode_value(326, <<"9">>)               -> 'market_on_close_imbalance_buy';
decode_value(327, <<$D>>)                -> 'news_dissemination';
decode_value(327, <<$E>>)                -> 'order_influx';
decode_value(327, <<$I>>)                -> 'order_imbalance';
decode_value(327, <<$M>>)                -> 'additional_information';
decode_value(327, <<$P>>)                -> 'news_pending';
decode_value(327, <<$X>>)                -> 'equipment_changeover';
decode_value(328, <<$N>>)                -> 'no';
decode_value(328, <<$Y>>)                -> 'yes';
decode_value(329, <<$N>>)                -> 'no';
decode_value(329, <<$Y>>)                -> 'yes';
decode_value(330, Bin)                   -> decode_field_value(330, 'QTY', Bin);
decode_value(331, Bin)                   -> decode_field_value(331, 'QTY', Bin);
decode_value(332, Bin)                   -> decode_field_value(332, 'PRICE', Bin);
decode_value(333, Bin)                   -> decode_field_value(333, 'PRICE', Bin);
decode_value(334, <<"1">>)               -> 'cancel';
decode_value(334, <<"2">>)               -> 'error';
decode_value(334, <<"3">>)               -> 'correction';
decode_value(335, Bin)                   -> decode_field_value(335, 'STRING', Bin);
decode_value(336, Bin)                   -> decode_field_value(336, 'STRING', Bin);
decode_value(337, Bin)                   -> decode_field_value(337, 'STRING', Bin);
decode_value(338, <<"1">>)               -> 'electronic';
decode_value(338, <<"2">>)               -> 'open_outcry';
decode_value(338, <<"3">>)               -> 'two_party';
decode_value(339, <<"1">>)               -> 'testing';
decode_value(339, <<"2">>)               -> 'simulated';
decode_value(339, <<"3">>)               -> 'production';
decode_value(340, <<"1">>)               -> 'halted';
decode_value(340, <<"2">>)               -> 'open';
decode_value(340, <<"3">>)               -> 'closed';
decode_value(340, <<"4">>)               -> 'pre_open';
decode_value(340, <<"5">>)               -> 'pre_close';
decode_value(341, Bin)                   -> decode_field_value(341, 'UTCTIMESTAMP', Bin);
decode_value(342, Bin)                   -> decode_field_value(342, 'UTCTIMESTAMP', Bin);
decode_value(343, Bin)                   -> decode_field_value(343, 'UTCTIMESTAMP', Bin);
decode_value(344, Bin)                   -> decode_field_value(344, 'UTCTIMESTAMP', Bin);
decode_value(345, Bin)                   -> decode_field_value(345, 'UTCTIMESTAMP', Bin);
decode_value(346, Bin)                   -> decode_field_value(346, 'INT', Bin);
decode_value(347, <<"EUC-JP">>)          -> 'euc_jp';
decode_value(347, <<"ISO-2022-JP">>)     -> 'iso_2022_jp';
decode_value(347, <<"SHIFT_JIS">>)       -> 'shift_jis';
decode_value(347, <<"UTF-8">>)           -> 'utf_8';
decode_value(348, Bin)                   -> decode_field_value(348, 'LENGTH', Bin);
decode_value(349, Bin)                   -> decode_field_value(349, 'DATA', Bin);
decode_value(350, Bin)                   -> decode_field_value(350, 'LENGTH', Bin);
decode_value(351, Bin)                   -> decode_field_value(351, 'DATA', Bin);
decode_value(352, Bin)                   -> decode_field_value(352, 'LENGTH', Bin);
decode_value(353, Bin)                   -> decode_field_value(353, 'DATA', Bin);
decode_value(354, Bin)                   -> decode_field_value(354, 'LENGTH', Bin);
decode_value(355, Bin)                   -> decode_field_value(355, 'DATA', Bin);
decode_value(356, Bin)                   -> decode_field_value(356, 'LENGTH', Bin);
decode_value(357, Bin)                   -> decode_field_value(357, 'DATA', Bin);
decode_value(358, Bin)                   -> decode_field_value(358, 'LENGTH', Bin);
decode_value(359, Bin)                   -> decode_field_value(359, 'DATA', Bin);
decode_value(360, Bin)                   -> decode_field_value(360, 'LENGTH', Bin);
decode_value(361, Bin)                   -> decode_field_value(361, 'DATA', Bin);
decode_value(362, Bin)                   -> decode_field_value(362, 'LENGTH', Bin);
decode_value(363, Bin)                   -> decode_field_value(363, 'DATA', Bin);
decode_value(364, Bin)                   -> decode_field_value(364, 'LENGTH', Bin);
decode_value(365, Bin)                   -> decode_field_value(365, 'DATA', Bin);
decode_value(366, Bin)                   -> decode_field_value(366, 'PRICE', Bin);
decode_value(367, Bin)                   -> decode_field_value(367, 'UTCTIMESTAMP', Bin);
decode_value(368, <<"1">>)               -> 'unknown_symbol';
decode_value(368, <<"2">>)               -> 'exchange';
decode_value(368, <<"3">>)               -> 'quote_exceeds_limit';
decode_value(368, <<"4">>)               -> 'too_late_to_enter';
decode_value(368, <<"5">>)               -> 'unknown_quote';
decode_value(368, <<"6">>)               -> 'duplicate_quote';
decode_value(368, <<"7">>)               -> 'invalid_bid_ask_spread';
decode_value(368, <<"8">>)               -> 'invalid_price';
decode_value(368, <<"9">>)               -> 'not_authorized_to_quote_security';
decode_value(369, Bin)                   -> decode_field_value(369, 'INT', Bin);
decode_value(370, Bin)                   -> decode_field_value(370, 'UTCTIMESTAMP', Bin);
decode_value(371, Bin)                   -> decode_field_value(371, 'INT', Bin);
decode_value(372, Bin)                   -> decode_field_value(372, 'STRING', Bin);
decode_value(373, <<"0">>)               -> 'invalid_tag_number';
decode_value(373, <<"1">>)               -> 'required_tag_missing';
decode_value(373, <<"10">>)              -> 'sendingtime_accuracy_problem';
decode_value(373, <<"11">>)              -> 'invalid_msgtype';
decode_value(373, <<"2">>)               -> 'tag_not_defined_for_this_message_type';
decode_value(373, <<"3">>)               -> 'undefined_tag';
decode_value(373, <<"4">>)               -> 'tag_specified_without_a_value';
decode_value(373, <<"5">>)               -> 'value_is_incorrect';
decode_value(373, <<"6">>)               -> 'incorrect_data_format_for_value';
decode_value(373, <<"7">>)               -> 'decryption_problem';
decode_value(373, <<"8">>)               -> 'signature_problem';
decode_value(373, <<"9">>)               -> 'compid_problem';
decode_value(374, <<$C>>)                -> 'cancel';
decode_value(374, <<$N>>)                -> 'no';
decode_value(375, Bin)                   -> decode_field_value(375, 'STRING', Bin);
decode_value(376, Bin)                   -> decode_field_value(376, 'STRING', Bin);
decode_value(377, <<$N>>)                -> 'no';
decode_value(377, <<$Y>>)                -> 'yes';
decode_value(378, <<"0">>)               -> 'gt_corporate_action';
decode_value(378, <<"1">>)               -> 'gt_renewal';
decode_value(378, <<"2">>)               -> 'verbal_change';
decode_value(378, <<"3">>)               -> 'repricing_of_order';
decode_value(378, <<"4">>)               -> 'broker_option';
decode_value(378, <<"5">>)               -> 'partial_decline_of_orderqty';
decode_value(379, Bin)                   -> decode_field_value(379, 'STRING', Bin);
decode_value(380, <<"0">>)               -> 'other';
decode_value(380, <<"1">>)               -> 'unkown_id';
decode_value(380, <<"2">>)               -> 'unknown_security';
decode_value(380, <<"3">>)               -> 'unsupported_message_type';
decode_value(380, <<"4">>)               -> 'application_not_available';
decode_value(380, <<"5">>)               -> 'conditionally_required_field_missing';
decode_value(381, Bin)                   -> decode_field_value(381, 'AMT', Bin);
decode_value(382, Bin)                   -> decode_field_value(382, 'INT', Bin);
decode_value(383, Bin)                   -> decode_field_value(383, 'INT', Bin);
decode_value(384, Bin)                   -> decode_field_value(384, 'INT', Bin);
decode_value(385, <<$R>>)                -> 'receive';
decode_value(385, <<$S>>)                -> 'send';
decode_value(386, Bin)                   -> decode_field_value(386, 'INT', Bin);
decode_value(387, Bin)                   -> decode_field_value(387, 'QTY', Bin);
decode_value(388, <<$0>>)                -> 'related_to_displayed_price';
decode_value(388, <<$1>>)                -> 'related_to_market_price';
decode_value(388, <<$2>>)                -> 'related_to_primary_price';
decode_value(388, <<$3>>)                -> 'related_to_local_primary_price';
decode_value(388, <<$4>>)                -> 'related_to_midpoint_price';
decode_value(388, <<$5>>)                -> 'related_to_last_trade_price';
decode_value(389, Bin)                   -> decode_field_value(389, 'PRICEOFFSET', Bin);
decode_value(390, Bin)                   -> decode_field_value(390, 'STRING', Bin);
decode_value(391, Bin)                   -> decode_field_value(391, 'STRING', Bin);
decode_value(392, Bin)                   -> decode_field_value(392, 'STRING', Bin);
decode_value(393, Bin)                   -> decode_field_value(393, 'INT', Bin);
decode_value(394, Bin)                   -> decode_field_value(394, 'INT', Bin);
decode_value(395, Bin)                   -> decode_field_value(395, 'INT', Bin);
decode_value(396, Bin)                   -> decode_field_value(396, 'AMT', Bin);
decode_value(397, Bin)                   -> decode_field_value(397, 'AMT', Bin);
decode_value(398, Bin)                   -> decode_field_value(398, 'INT', Bin);
decode_value(399, Bin)                   -> decode_field_value(399, 'INT', Bin);
decode_value(400, Bin)                   -> decode_field_value(400, 'STRING', Bin);
decode_value(401, Bin)                   -> decode_field_value(401, 'INT', Bin);
decode_value(402, Bin)                   -> decode_field_value(402, 'FLOAT', Bin);
decode_value(403, Bin)                   -> decode_field_value(403, 'FLOAT', Bin);
decode_value(404, Bin)                   -> decode_field_value(404, 'AMT', Bin);
decode_value(405, Bin)                   -> decode_field_value(405, 'FLOAT', Bin);
decode_value(406, Bin)                   -> decode_field_value(406, 'AMT', Bin);
decode_value(407, Bin)                   -> decode_field_value(407, 'FLOAT', Bin);
decode_value(408, Bin)                   -> decode_field_value(408, 'AMT', Bin);
decode_value(409, <<"1">>)               -> '5_day_moving_average';
decode_value(409, <<"2">>)               -> '20_day_moving_average';
decode_value(409, <<"3">>)               -> 'normal_market_size';
decode_value(409, <<"4">>)               -> 'other';
decode_value(410, Bin)                   -> decode_field_value(410, 'FLOAT', Bin);
decode_value(411, <<$N>>)                -> 'no';
decode_value(411, <<$Y>>)                -> 'yes';
decode_value(412, Bin)                   -> decode_field_value(412, 'AMT', Bin);
decode_value(413, Bin)                   -> decode_field_value(413, 'FLOAT', Bin);
decode_value(414, <<"1">>)               -> 'buyside_explicitly_requests_status_using_statusreq';
decode_value(414, <<"2">>)               -> 'sellside_periodically_sends_status_using_liststatu';
decode_value(414, <<"3">>)               -> 'real_time_execution_reports';
decode_value(415, Bin)                   -> decode_field_value(415, 'INT', Bin);
decode_value(416, <<"1">>)               -> 'net';
decode_value(416, <<"2">>)               -> 'gross';
decode_value(417, Bin)                   -> decode_field_value(417, 'INT', Bin);
decode_value(418, <<$A>>)                -> 'agency';
decode_value(418, <<$G>>)                -> 'vwap_guarantee';
decode_value(418, <<$J>>)                -> 'guaranteed_close';
decode_value(418, <<$R>>)                -> 'risk_trade';
decode_value(419, <<$2>>)                -> 'closing_price_at_morning_session';
decode_value(419, <<$3>>)                -> 'closing_price';
decode_value(419, <<$4>>)                -> 'current_price';
decode_value(419, <<$5>>)                -> 'sq';
decode_value(419, <<$6>>)                -> 'vwap_through_a_day';
decode_value(419, <<$7>>)                -> 'vwap_through_a_morning_session';
decode_value(419, <<$8>>)                -> 'vwap_through_an_afternoon_session';
decode_value(419, <<$9>>)                -> 'vwap_through_a_day_except_yori';
decode_value(419, <<$A>>)                -> 'vwap_through_a_morning_session_except_yori';
decode_value(419, <<$B>>)                -> 'vwap_through_an_afternoon_session_except_yori';
decode_value(419, <<$C>>)                -> 'strike';
decode_value(419, <<$D>>)                -> 'open';
decode_value(419, <<$Z>>)                -> 'others';
decode_value(420, Bin)                   -> decode_field_value(420, 'INT', Bin);
decode_value(421, Bin)                   -> decode_field_value(421, 'STRING', Bin);
decode_value(422, Bin)                   -> decode_field_value(422, 'INT', Bin);
decode_value(423, <<"1">>)               -> 'percentage';
decode_value(423, <<"2">>)               -> 'per_share';
decode_value(423, <<"3">>)               -> 'fixed_amount';
decode_value(424, Bin)                   -> decode_field_value(424, 'QTY', Bin);
decode_value(425, Bin)                   -> decode_field_value(425, 'QTY', Bin);
decode_value(426, Bin)                   -> decode_field_value(426, 'PRICE', Bin);
decode_value(427, <<"0">>)               -> 'book_out_all_trades_on_day_of_execution';
decode_value(427, <<"1">>)               -> 'accumulate_executions_until_order_is_filled_or_exp';
decode_value(427, <<"2">>)               -> 'accumulate_until_verbally_notified_otherwise';
decode_value(428, Bin)                   -> decode_field_value(428, 'INT', Bin);
decode_value(429, Bin)                   -> decode_field_value(429, 'INT', Bin);
decode_value(430, <<"1">>)               -> 'net';
decode_value(430, <<"2">>)               -> 'gross';
decode_value(431, Bin)                   -> decode_field_value(431, 'INT', Bin);
decode_value(432, Bin)                   -> decode_field_value(432, 'LOCALMKTDATE', Bin);
decode_value(433, <<$1>>)                -> 'immediate';
decode_value(433, <<$2>>)                -> 'wait_for_execute_instruction';
decode_value(434, <<$1>>)                -> 'order_cancel_request';
decode_value(434, <<$2>>)                -> 'order_cancel_replace_request';
decode_value(435, Bin)                   -> decode_field_value(435, 'FLOAT', Bin);
decode_value(436, Bin)                   -> decode_field_value(436, 'FLOAT', Bin);
decode_value(437, Bin)                   -> decode_field_value(437, 'QTY', Bin);
decode_value(438, Bin)                   -> decode_field_value(438, 'UTCTIMESTAMP', Bin);
decode_value(439, Bin)                   -> decode_field_value(439, 'STRING', Bin);
decode_value(440, Bin)                   -> decode_field_value(440, 'STRING', Bin);
decode_value(441, Bin)                   -> decode_field_value(441, 'INT', Bin);
decode_value(442, <<$1>>)                -> 'single_security';
decode_value(442, <<$2>>)                -> 'individual_leg_of_a_multi_leg_security';
decode_value(442, <<$3>>)                -> 'multi_leg_security';
decode_value(443, Bin)                   -> decode_field_value(443, 'UTCTIMESTAMP', Bin);
decode_value(444, Bin)                   -> decode_field_value(444, 'STRING', Bin);
decode_value(445, Bin)                   -> decode_field_value(445, 'LENGTH', Bin);
decode_value(446, Bin)                   -> decode_field_value(446, 'DATA', Bin);
decode_value(_Field, Value)              -> Value.

